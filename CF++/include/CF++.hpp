/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @header      CF++.h
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    CoreFoundation++ main header file
 */

#ifndef CFPP
#define CFPP

#include <CoreFoundation/CoreFoundation.h>
#include <string>
#include <iostream>
#include <vector>

#if defined( __cplusplus ) && ( __cplusplus > 199711L || ( defined( _MSC_VER ) && _MSC_VER >= 1800 ) )
#define CFPP_HAS_CPP11  1
#endif

#ifdef _WIN32
#ifdef CFPP_DLL_BUILD
#define CFPP_EXPORT __declspec( dllexport )
#else
#define CFPP_EXPORT __declspec( dllimport )
#endif
#else
#define CFPP_EXPORT     
#endif

#include <CF++/CFPP-Type.hpp>

namespace CF
{
	/*!
		@brief CFPP class for CF type.
		Support binding CFPP types with their matching CF types for overloaded CF::BridgingRelease function
	 */
	template<typename>struct ClassFor; template<> struct ClassFor<CFTypeRef> { typedef CF::Type type; };

	/*!
		@function BridgingRelease
		@brief Convert a CF object into it's matching CFPP type.
		@note This function is implicitly defined for all CF types that CFPP wraps.
		@param cf A valid CoreFoundation object or NULL. A non-NULL value will be released.
		@return A CFPP object constructed with the CoreFoundation object. If the object is NULL, the default constructor is used.
	 */
	template <typename CFType>
	static inline typename ClassFor<CFType>::type BridgingRelease(CFType CF_RELEASES_ARGUMENT cf) {
		if (cf == nullptr) return typename ClassFor<CFType>::type();
		typename ClassFor<CFType>::type cfpp(cf);
		CFRelease(cf);
		return cfpp;
	}
}

#include <CF++/CFPP-PropertyListType.hpp>
#include <CF++/CFPP-AutoPointer.hpp>
#include <CF++/CFPP-Boolean.hpp>
#include <CF++/CFPP-Number.hpp>
#include <CF++/CFPP-String.hpp>
#include <CF++/CFPP-URL.hpp>
#include <CF++/CFPP-Data.hpp>
#include <CF++/CFPP-Date.hpp>
#include <CF++/CFPP-Array.hpp>
#include <CF++/CFPP-Pair.hpp>
#include <CF++/CFPP-Dictionary.hpp>
#include <CF++/CFPP-Error.hpp>
#include <CF++/CFPP-UUID.hpp>
#include <CF++/CFPP-ReadStream.hpp>
#include <CF++/CFPP-WriteStream.hpp>
#include <CF++/CFPP-PropertyListType-Definition.hpp>

#endif /* CFPP */
