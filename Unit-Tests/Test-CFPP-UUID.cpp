/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @file        Test-CFPP-UUID.cpp
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    Unit tests for CF::UUID
 */

#include <CF++.hpp>
#include <GoogleMock/GoogleMock.h>

using namespace testing;

TEST( CFPP_UUID, CTOR )
{
    CF::UUID u;
    
    ASSERT_TRUE( u.IsValid() );
    ASSERT_GT( u.GetString().GetLength(), 0 );
}

TEST( CFPP_UUID, CTOR_CFType )
{
    CF::UUID u1;
    CF::UUID u2( static_cast< CFTypeRef >( u1.GetCFObject() ) );
    CF::UUID u3( static_cast< CFTypeRef >( NULL ) );
    CF::UUID u4( static_cast< CFTypeRef >( CF::Boolean().GetCFObject() ) );
    
    ASSERT_TRUE(  u2.IsValid() );
    ASSERT_FALSE( u3.IsValid() );
    ASSERT_FALSE( u4.IsValid() );
    ASSERT_EQ( u1, u2 );
}

TEST( CFPP_UUID, CTOR_CFUUID )
{
    CF::UUID u1;
    CF::UUID u2( static_cast< CFUUIDRef >( u1.GetCFObject() ) );
    CF::UUID u3( static_cast< CFUUIDRef >( NULL ) );
    CF::UUID u4( static_cast< CFUUIDRef >( CF::Boolean().GetCFObject() ) );
    
    ASSERT_TRUE(  u2.IsValid() );
    ASSERT_FALSE( u3.IsValid() );
    ASSERT_FALSE( u4.IsValid() );
    ASSERT_EQ( u1, u2 );
}

TEST( CFPP_UUID, CCTOR )
{
    CF::UUID u1;
    CF::UUID u2( u1 );
    CF::UUID u3( static_cast< CFUUIDRef >( NULL ) );
    CF::UUID u4( u3 );
    
    ASSERT_TRUE( u1.IsValid() );
    ASSERT_TRUE( u1.IsValid() );
    ASSERT_EQ( u1.GetString(), u2.GetString() );
    ASSERT_FALSE( u3.IsValid() );
    ASSERT_FALSE( u4.IsValid() );
}

#ifdef CFPP_HAS_CPP11
TEST( CFPP_UUID, MCTOR )
{
    CF::UUID u1;
    CF::UUID u2( std::move( u1 ) );
    
    ASSERT_TRUE(  u2.IsValid() );
    ASSERT_FALSE( u1.IsValid() );
}
#endif

TEST( CFPP_UUID, OperatorAssignUUID )
{
    CF::UUID u1;
    CF::UUID u2;
    
    ASSERT_NE( u1.GetString(), u2.GetString() );
    
    u1 = u2;
    
    ASSERT_EQ( u1.GetString(), u2.GetString() );
}

TEST( CFPP_UUID, OperatorAssignCFType )
{
    CF::UUID u1;
    CF::UUID u2;
    
    ASSERT_NE( u1, u2 );
    
    u1 = static_cast< CFTypeRef >( u2.GetCFObject() );
    
    ASSERT_TRUE( u1.IsValid() );
    ASSERT_EQ( u1, u2 );
    
    u1 = static_cast< CFTypeRef >( NULL );
    
    ASSERT_FALSE( u1.IsValid() );
    
    u1 = u2;
    
    ASSERT_TRUE( u1.IsValid() );
    
    u1 = static_cast< CFTypeRef >( CF::Boolean().GetCFObject() );
    
    ASSERT_FALSE( u1.IsValid() );
}

TEST( CFPP_UUID, OperatorAssignCFUUID )
{
    CF::UUID u1;
    CF::UUID u2;
    
    ASSERT_NE( u1, u2 );
    
    u1 = static_cast< CFUUIDRef >( u2.GetCFObject() );
    
    ASSERT_TRUE( u1.IsValid() );
    ASSERT_EQ( u1, u2 );
    
    u1 = static_cast< CFUUIDRef >( NULL );
    
    ASSERT_FALSE( u1.IsValid() );
    
    u1 = u2;
    
    ASSERT_TRUE( u1.IsValid() );
    
    u1 = static_cast< CFUUIDRef >( CF::Boolean().GetCFObject() );
    
    ASSERT_FALSE( u1.IsValid() );
}

TEST( CFPP_UUID, OperatorEqualUUID )
{
    CF::UUID u1;
    CF::UUID u2( u1 );
    CF::UUID u3;
    CF::UUID u4( static_cast< CFUUIDRef >( NULL ) );
    
    ASSERT_TRUE(  u1 == u2 );
    ASSERT_FALSE( u1 == u3 );
    ASSERT_FALSE( u4 == u1 );
    ASSERT_FALSE( u4 == u4 );
}

TEST( CFPP_UUID, OperatorEqualCFType )
{
    CF::UUID u1;
    CF::UUID u2( u1 );
    CF::UUID u3;
    CF::UUID u4( static_cast< CFUUIDRef >( NULL ) );
    
    ASSERT_TRUE(  u1 == static_cast< CFTypeRef >( u2.GetCFObject() ) );
    ASSERT_FALSE( u1 == static_cast< CFTypeRef >( u3.GetCFObject() ) );
    ASSERT_FALSE( u4 == static_cast< CFTypeRef >( u1.GetCFObject() ) );
    ASSERT_FALSE( u4 == static_cast< CFTypeRef >( u4.GetCFObject() ) );
    ASSERT_FALSE( u4 == static_cast< CFTypeRef >( CF::Boolean().GetCFObject() ) );
}

TEST( CFPP_UUID, OperatorEqualCFUUID )
{
    CF::UUID u1;
    CF::UUID u2( u1 );
    CF::UUID u3;
    CF::UUID u4( static_cast< CFUUIDRef >( NULL ) );
    
    ASSERT_TRUE(  u1 == static_cast< CFUUIDRef >( u2.GetCFObject() ) );
    ASSERT_FALSE( u1 == static_cast< CFUUIDRef >( u3.GetCFObject() ) );
    ASSERT_FALSE( u4 == static_cast< CFUUIDRef >( u1.GetCFObject() ) );
    ASSERT_FALSE( u4 == static_cast< CFUUIDRef >( u4.GetCFObject() ) );
    ASSERT_FALSE( u4 == static_cast< CFUUIDRef >( CF::Boolean().GetCFObject() ) );
}

TEST( CFPP_UUID, OperatorEqualSTDString )
{
    CF::UUID u1;
    CF::UUID u2( u1 );
    CF::UUID u3;
    CF::UUID u4( static_cast< CFUUIDRef >( NULL ) );
    
    ASSERT_TRUE(  u1 == static_cast< std::string >( u2.GetString() ) );
    ASSERT_FALSE( u1 == static_cast< std::string >( u3.GetString() ) );
    ASSERT_FALSE( u4 == static_cast< std::string >( u1.GetString() ) );
    ASSERT_FALSE( u4 == static_cast< std::string >( u4.GetString() ) );
}

TEST( CFPP_UUID, OperatorNotEqualUUID )
{
    CF::UUID u1;
    CF::UUID u2( u1 );
    CF::UUID u3;
    CF::UUID u4( static_cast< CFUUIDRef >( NULL ) );
    
    ASSERT_FALSE( u1 != u2 );
    ASSERT_TRUE(  u1 != u3 );
    ASSERT_TRUE(  u4 != u1 );
    ASSERT_TRUE(  u4 != u4 );
}

TEST( CFPP_UUID, OperatorNotEqualCFType )
{
    CF::UUID u1;
    CF::UUID u2( u1 );
    CF::UUID u3;
    CF::UUID u4( static_cast< CFUUIDRef >( NULL ) );
    
    ASSERT_FALSE( u1 != static_cast< CFTypeRef >( u2.GetCFObject() ) );
    ASSERT_TRUE(  u1 != static_cast< CFTypeRef >( u3.GetCFObject() ) );
    ASSERT_TRUE(  u4 != static_cast< CFTypeRef >( u1.GetCFObject() ) );
    ASSERT_TRUE(  u4 != static_cast< CFTypeRef >( u4.GetCFObject() ) );
    ASSERT_TRUE(  u4 != static_cast< CFTypeRef >( CF::Boolean().GetCFObject() ) );
}

TEST( CFPP_UUID, OperatorNotEqualCFUUID )
{
    CF::UUID u1;
    CF::UUID u2( u1 );
    CF::UUID u3;
    CF::UUID u4( static_cast< CFUUIDRef >( NULL ) );
    
    ASSERT_FALSE( u1 != static_cast< CFUUIDRef >( u2.GetCFObject() ) );
    ASSERT_TRUE(  u1 != static_cast< CFUUIDRef >( u3.GetCFObject() ) );
    ASSERT_TRUE(  u4 != static_cast< CFUUIDRef >( u1.GetCFObject() ) );
    ASSERT_TRUE(  u4 != static_cast< CFUUIDRef >( u4.GetCFObject() ) );
    ASSERT_TRUE(  u4 != static_cast< CFUUIDRef >( CF::Boolean().GetCFObject() ) );
}

TEST( CFPP_UUID, OperatorNotEqualSTDString )
{
    CF::UUID u1;
    CF::UUID u2( u1 );
    CF::UUID u3;
    CF::UUID u4( static_cast< CFUUIDRef >( NULL ) );
    
    ASSERT_FALSE( u1 != static_cast< std::string >( u2.GetString() ) );
    ASSERT_TRUE(  u1 != static_cast< std::string >( u3.GetString() ) );
    ASSERT_TRUE(  u4 != static_cast< std::string >( u1.GetString() ) );
    ASSERT_TRUE(  u4 != static_cast< std::string >( u4.GetString() ) );
}

TEST( CFPP_UUID, CastToSTDString )
{
    CF::UUID    u;
    std::string s( static_cast< std::string >( u ) );
    
    ASSERT_TRUE( s.length() == 36 );
    ASSERT_EQ( u.GetString(), s );
}

TEST( CFPP_UUID, GetTypeID )
{
    CF::UUID u;
    
    ASSERT_EQ( u.GetTypeID(), CFUUIDGetTypeID() );
}

TEST( CFPP_UUID, GetCFObject )
{
    CF::UUID u1;
    CF::UUID u2( static_cast< CFUUIDRef >( NULL ) );
    
    ASSERT_TRUE( u1.GetCFObject() != NULL );
    ASSERT_TRUE( u2.GetCFObject() == NULL );
    ASSERT_EQ( CFGetTypeID( u1.GetCFObject() ), CFUUIDGetTypeID() );
}

TEST( CFPP_UUID, GetString )
{
    CF::UUID u;
    
    ASSERT_EQ( u.GetString().GetLength(), 36 );
    
    u = static_cast< CFUUIDRef >( NULL );
    
    ASSERT_FALSE( u.IsValid() );
    ASSERT_EQ( u.GetString().GetLength(), 0 );
}

TEST( CFPP_UUID, Swap )
{
    CF::UUID    u1;
    CF::UUID    u2;
    std::string s1( u1.GetString() );
    std::string s2( u2.GetString() );
    
    ASSERT_EQ( u1.GetString(), s1 );
    ASSERT_EQ( u2.GetString(), s2 );
    
    swap( u1, u2 );
    
    ASSERT_EQ( u1.GetString(), s2 );
    ASSERT_EQ( u2.GetString(), s1 );
}

// Hidden from analyzer because it misreports a leak
#ifndef __clang_analyzer__
TEST( CFPP_UUID, BridgingRelease )
{
	// Wrapper retains, so retain count should be the same after bridge

	CFUUIDRef cf = CFUUIDCreate(NULL);

	CFRetain(cf);

	CFIndex retainCount = CFGetRetainCount(cf);

	ASSERT_EQ(CFGetRetainCount(cf), retainCount);

	CF::UUID cpp = CF::BridgingRelease(cf);

	ASSERT_EQ(CFGetRetainCount(cf), retainCount);

	CFRelease(cf);
}
#endif
