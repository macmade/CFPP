/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @file        Test-CFPP-Number.cpp
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    Unit tests for CF::Number
 */

#include <CF++.hpp>
#include <GoogleMock/GoogleMock.h>

using namespace testing;

static bool FloatIsEqual( CF::Number::Float32 x, CF::Number::Float32 y );
static bool FloatIsEqual( CF::Number::Float64 x, CF::Number::Float64 y );

static bool FloatIsEqual( CF::Number::Float32 x, CF::Number::Float32 y )
{
    return fabsf( x - y ) < FLT_EPSILON;
}

static bool FloatIsEqual( CF::Number::Float64 x, CF::Number::Float64 y )
{
    return fabs( x - y ) < DBL_EPSILON;
}

TEST( CFPP_Number, CTOR )
{
    CF::Number n;
    
    ASSERT_TRUE( n.IsValid() );
    ASSERT_TRUE( n == 0 );
    ASSERT_TRUE( n.GetCFObject() != NULL );
}

TEST( CFPP_Number, CTOR_CFType )
{
    CF::Number n1( static_cast< CFTypeRef >( CF::Number( 42 ).GetCFObject() ) );
    CF::Number n2( static_cast< CFTypeRef >( NULL ) );
    
    ASSERT_TRUE(  n1.IsValid() );
    ASSERT_FALSE( n2.IsValid() );
    
    ASSERT_TRUE( n1 == 42 );
    ASSERT_TRUE( n2 == 0 );
    
    ASSERT_TRUE( n1.GetCFObject() != NULL );
    ASSERT_TRUE( n2.GetCFObject() == NULL );
}

TEST( CFPP_Number, CTOR_CFNumber )
{
    CF::Number n1( static_cast< CFNumberRef >( CF::Number( 42 ).GetCFObject() ) );
    CF::Number n2( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE(  n1.IsValid() );
    ASSERT_FALSE( n2.IsValid() );
    
    ASSERT_TRUE( n1 == 42 );
    ASSERT_TRUE( n2 == 0 );
    
    ASSERT_TRUE( n1.GetCFObject() != NULL );
    ASSERT_TRUE( n2.GetCFObject() == NULL );
}

template< typename T >
void TMPL_CFPP_Number_CTOR_CFType_T( void )
{
    CF::Number n1( static_cast< CFTypeRef >( CF::Number( 42 ).GetCFObject() ), static_cast< T >( 43 ) );
    CF::Number n2( static_cast< CFTypeRef >( NULL ),                           static_cast< T >( 43 ) );
    
    ASSERT_TRUE( n1.IsValid() );
    ASSERT_TRUE( n2.IsValid() );
    
    ASSERT_TRUE( n1 == 42 );
    ASSERT_TRUE( n2 == 43 );
}

TEST( CFPP_Number, CTOR_CFType_T )
{
    TMPL_CFPP_Number_CTOR_CFType_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_CTOR_CFType_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_CTOR_CFType_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_CTOR_CFType_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_CTOR_CFType_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_CTOR_CFType_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_CTOR_CFType_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_CTOR_CFType_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_CTOR_CFType_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_CTOR_CFType_T< CF::Number::Float64 >();
}

template< typename T >
void TMPL_CFPP_Number_CTOR_CFNumber_T( void )
{
    CF::Number n1( static_cast< CFNumberRef >( CF::Number( 42 ).GetCFObject() ), static_cast< T >( 43 ) );
    CF::Number n2( static_cast< CFNumberRef >( NULL ),                           static_cast< T >( 43 ) );
    
    ASSERT_TRUE( n1.IsValid() );
    ASSERT_TRUE( n2.IsValid() );
    
    ASSERT_TRUE( n1 == 42 );
    ASSERT_TRUE( n2 == 43 );
}

TEST( CFPP_Number, CTOR_CFNumber_T )
{
    TMPL_CFPP_Number_CTOR_CFNumber_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_CTOR_CFNumber_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_CTOR_CFNumber_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_CTOR_CFNumber_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_CTOR_CFNumber_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_CTOR_CFNumber_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_CTOR_CFNumber_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_CTOR_CFNumber_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_CTOR_CFNumber_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_CTOR_CFNumber_T< CF::Number::Float64 >();
}

template< typename T >
void TMPL_CFPP_Number_CTOR_T( void )
{
    CF::Number n( static_cast< T >( 42 ) );
    
    ASSERT_TRUE( n == 42 );
}

TEST( CFPP_Number, CTOR_T )
{
    TMPL_CFPP_Number_CTOR_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_CTOR_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_CTOR_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_CTOR_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_CTOR_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_CTOR_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_CTOR_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_CTOR_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_CTOR_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_CTOR_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, CCTOR )
{
    CF::Number n1( 42 );
    CF::Number n2( n1 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    CF::Number n4( n3 );
    
    ASSERT_TRUE( n1.IsValid() );
    ASSERT_TRUE( n2.IsValid() );
    
    ASSERT_TRUE( n1 == 42 );
    ASSERT_TRUE( n2 == 42 ); 
    
    ASSERT_FALSE( n3.IsValid() );
    ASSERT_FALSE( n4.IsValid() );
}

#ifdef CFPP_HAS_CPP11
TEST( CFPP_Number, MCTOR )
{
    CF::Number n1( 42 );
    CF::Number n2( std::move( n1 ) );
    
    ASSERT_FALSE( n1.IsValid() );
    ASSERT_TRUE(  n2.IsValid() );
    
    ASSERT_TRUE( n2 == 42 );
}
#endif

TEST( CFPP_Number, OperatorAssignNumber )
{
    CF::Number n1;
    CF::Number n2( 1 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( n1 == 0 );
    ASSERT_TRUE( n2 == 1 );
    ASSERT_FALSE( n3.IsValid() );
    
    n1 = n2;
    
    ASSERT_TRUE( n1 == 1 );
    
    n1 = n3;
    
    ASSERT_FALSE( n1.IsValid() );
    ASSERT_TRUE( n1 == 0 );
    
    n1 = n2;
    
    ASSERT_TRUE( n1.IsValid() );
    ASSERT_TRUE( n1 == 1 );
}

TEST( CFPP_Number, OperatorAssignCFType )
{
    CF::Number n;
    
    ASSERT_TRUE( n == 0 );
    
    n = static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() );
    
    ASSERT_TRUE( n == 1 );
    
    n = static_cast< CFTypeRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_TRUE( n == 0 );
    
    n = static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() );
    
    ASSERT_TRUE( n.IsValid() );
    ASSERT_TRUE( n == 1 );
}

TEST( CFPP_Number, OperatorAssignCFNumber )
{
    CF::Number n;
    
    ASSERT_TRUE( n == 0 );
    
    n = static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() );
    
    ASSERT_TRUE( n == 1 );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_TRUE( n == 0 );
    
    n = static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() );
    
    ASSERT_TRUE( n.IsValid() );
    ASSERT_TRUE( n == 1 );
}

template< typename T >
void TMPL_CFPP_Number_OperatorAssign_T( void )
{
    CF::Number n;
    
    ASSERT_TRUE( n == 0 );
    
    n = static_cast< T >( 1 );
    
    ASSERT_TRUE( n == 1 );
}

TEST( CFPP_Number, OperatorAssign_T )
{
    TMPL_CFPP_Number_OperatorAssign_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorAssign_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorAssign_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorAssign_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorAssign_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorAssign_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorAssign_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorAssign_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorAssign_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorAssign_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorEqualNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 == CF::Number(  1 ) );
        ASSERT_FALSE( n2 == CF::Number( 43 ) );
        ASSERT_FALSE( n3 == CF::Number(  1 ) );
        
        ASSERT_TRUE( n1 == CF::Number(  0 ) );
        ASSERT_TRUE( n2 == CF::Number( 42 ) );
        ASSERT_TRUE( n3 == CF::Number(  0 ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE(  n1 == n3 );
        ASSERT_FALSE( n2 == n3 );
        ASSERT_TRUE(  n3 == n3 );
    }
}

TEST( CFPP_Number, OperatorEqualCFType )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 == static_cast< CFTypeRef >( CF::Number(  1 ).GetCFObject() ) );
        ASSERT_FALSE( n2 == static_cast< CFTypeRef >( CF::Number( 43 ).GetCFObject() ) );
        ASSERT_FALSE( n3 == static_cast< CFTypeRef >( CF::Number(  1 ).GetCFObject() ) );
        
        ASSERT_TRUE( n1 == static_cast< CFTypeRef >( CF::Number(  0 ).GetCFObject() ) );
        ASSERT_TRUE( n2 == static_cast< CFTypeRef >( CF::Number( 42 ).GetCFObject() ) );
        ASSERT_TRUE( n3 == static_cast< CFTypeRef >( CF::Number(  0 ).GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE(  n1 == static_cast< CFTypeRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n2 == static_cast< CFTypeRef >( n3.GetCFObject() ) );
        ASSERT_TRUE(  n3 == static_cast< CFTypeRef >( n3.GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE(  n1 == static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n2 == static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
        ASSERT_TRUE(  n3 == static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
    }
}

TEST( CFPP_Number, OperatorEqualCFNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 == static_cast< CFNumberRef >( CF::Number(  1 ).GetCFObject() ) );
        ASSERT_FALSE( n2 == static_cast< CFNumberRef >( CF::Number( 43 ).GetCFObject() ) );
        ASSERT_FALSE( n3 == static_cast< CFNumberRef >( CF::Number(  1 ).GetCFObject() ) );
        
        ASSERT_TRUE( n1 == static_cast< CFNumberRef >( CF::Number(  0 ).GetCFObject() ) );
        ASSERT_TRUE( n2 == static_cast< CFNumberRef >( CF::Number( 42 ).GetCFObject() ) );
        ASSERT_TRUE( n3 == static_cast< CFNumberRef >( CF::Number(  0 ).GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE(  n1 == static_cast< CFNumberRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n2 == static_cast< CFNumberRef >( n3.GetCFObject() ) );
        ASSERT_TRUE(  n3 == static_cast< CFNumberRef >( n3.GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE(  n1 == static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n2 == static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
        ASSERT_TRUE(  n3 == static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
    }
}

template< typename T >
void TMPL_CFPP_Number_OperatorEqual_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_FALSE( n3 == static_cast< T >(  1 ) );
    ASSERT_FALSE( n2 == static_cast< T >( 43 ) );
    ASSERT_FALSE( n1 == static_cast< T >(  1 ) );
    
    ASSERT_TRUE( n1 == static_cast< T >(  0 ) );
    ASSERT_TRUE( n2 == static_cast< T >( 42 ) );
    ASSERT_TRUE( n3 == static_cast< T >(  0 ) );
}

TEST( CFPP_Number, OperatorEqual_T )
{
    TMPL_CFPP_Number_OperatorEqual_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorEqual_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorEqual_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorEqual_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorEqual_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorEqual_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorEqual_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorEqual_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_OperatorEqual_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorEqual_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorNotEqualNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE( n1 != CF::Number(  1 ) );
        ASSERT_TRUE( n2 != CF::Number( 43 ) );
        ASSERT_TRUE( n3 != CF::Number(  1 ) );
        
        ASSERT_FALSE( n1 != CF::Number(  0 ) );
        ASSERT_FALSE( n2 != CF::Number( 42 ) );
        ASSERT_FALSE( n3 != CF::Number(  0 ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 != n3 );
        ASSERT_TRUE(  n2 != n3 );
        ASSERT_FALSE( n3 != n3 );
    }
}

TEST( CFPP_Number, OperatorNotEqualCFType )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE( n1 != static_cast< CFTypeRef >( CF::Number(  1 ).GetCFObject() ) );
        ASSERT_TRUE( n2 != static_cast< CFTypeRef >( CF::Number( 43 ).GetCFObject() ) );
        ASSERT_TRUE( n3 != static_cast< CFTypeRef >( CF::Number(  1 ).GetCFObject() ) );
        
        ASSERT_FALSE( n1 != static_cast< CFTypeRef >( CF::Number(  0 ).GetCFObject() ) );
        ASSERT_FALSE( n2 != static_cast< CFTypeRef >( CF::Number( 42 ).GetCFObject() ) );
        ASSERT_FALSE( n3 != static_cast< CFTypeRef >( CF::Number(  0 ).GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 != static_cast< CFTypeRef >( n3.GetCFObject() ) );
        ASSERT_TRUE(  n2 != static_cast< CFTypeRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n3 != static_cast< CFTypeRef >( n3.GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 != static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
        ASSERT_TRUE(  n2 != static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n3 != static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
    }
}

TEST( CFPP_Number, OperatorNotEqualCFNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE( n1 != static_cast< CFNumberRef >( CF::Number(  1 ).GetCFObject() ) );
        ASSERT_TRUE( n2 != static_cast< CFNumberRef >( CF::Number( 43 ).GetCFObject() ) );
        ASSERT_TRUE( n3 != static_cast< CFNumberRef >( CF::Number(  1 ).GetCFObject() ) );
        
        ASSERT_FALSE( n1 != static_cast< CFNumberRef >( CF::Number(  0 ).GetCFObject() ) );
        ASSERT_FALSE( n2 != static_cast< CFNumberRef >( CF::Number( 42 ).GetCFObject() ) );
        ASSERT_FALSE( n3 != static_cast< CFNumberRef >( CF::Number(  0 ).GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 != static_cast< CFNumberRef >( n3.GetCFObject() ) );
        ASSERT_TRUE(  n2 != static_cast< CFNumberRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n3 != static_cast< CFNumberRef >( n3.GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 != static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
        ASSERT_TRUE(  n2 != static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n3 != static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
    }
}

template< typename T >
void TMPL_CFPP_Number_OperatorNotEqual_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( n3 != static_cast< T >(  1 ) );
    ASSERT_TRUE( n2 != static_cast< T >( 43 ) );
    ASSERT_TRUE( n1 != static_cast< T >(  1 ) );
    
    ASSERT_FALSE( n1 != static_cast< T >(  0 ) );
    ASSERT_FALSE( n2 != static_cast< T >( 42 ) );
    ASSERT_FALSE( n3 != static_cast< T >(  0 ) );
}

TEST( CFPP_Number, OperatorNotEqual_T )
{
    TMPL_CFPP_Number_OperatorNotEqual_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorNotEqual_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorNotEqual_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorNotEqual_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorNotEqual_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorNotEqual_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorNotEqual_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorNotEqual_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_OperatorNotEqual_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorNotEqual_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorGreaterOrEqualNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE( n1 >= CF::Number(  0 ) );
        ASSERT_TRUE( n1 >= CF::Number( -1 ) );
        ASSERT_TRUE( n2 >= CF::Number( 42 ) );
        ASSERT_TRUE( n2 >= CF::Number( 41 ) );
        ASSERT_TRUE( n3 >= CF::Number(  0 ) );
        ASSERT_TRUE( n3 >= CF::Number( -1 ) );
        
        ASSERT_FALSE( n1 >= CF::Number( 100 ) );
        ASSERT_FALSE( n2 >= CF::Number( 100 ) );
        ASSERT_FALSE( n3 >= CF::Number( 100 ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE( n1 >= n3 );
        ASSERT_TRUE( n2 >= n3 );
        ASSERT_TRUE( n3 >= n3 );
    }
}

TEST( CFPP_Number, OperatorGreaterOrEqualCFType )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE( n1 >= static_cast< CFTypeRef >( CF::Number(  0 ).GetCFObject() ) );
        ASSERT_TRUE( n1 >= static_cast< CFTypeRef >( CF::Number( -1 ).GetCFObject() ) );
        ASSERT_TRUE( n2 >= static_cast< CFTypeRef >( CF::Number( 42 ).GetCFObject() ) );
        ASSERT_TRUE( n2 >= static_cast< CFTypeRef >( CF::Number( 41 ).GetCFObject() ) );
        ASSERT_TRUE( n3 >= static_cast< CFTypeRef >( CF::Number(  0 ).GetCFObject() ) );
        ASSERT_TRUE( n3 >= static_cast< CFTypeRef >( CF::Number( -1 ).GetCFObject() ) );
        
        ASSERT_FALSE( n1 >= static_cast< CFTypeRef >( CF::Number( 100 ).GetCFObject() ) );
        ASSERT_FALSE( n2 >= static_cast< CFTypeRef >( CF::Number( 100 ).GetCFObject() ) );
        ASSERT_FALSE( n3 >= static_cast< CFTypeRef >( CF::Number( 100 ).GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE( n1 >= static_cast< CFTypeRef >( n3.GetCFObject() ) );
        ASSERT_TRUE( n2 >= static_cast< CFTypeRef >( n3.GetCFObject() ) );
        ASSERT_TRUE( n3 >= static_cast< CFTypeRef >( n3.GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE( n1 >= static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
        ASSERT_TRUE( n2 >= static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
        ASSERT_TRUE( n3 >= static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
    }
}

TEST( CFPP_Number, OperatorGreaterOrEqualCFNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE( n1 >= static_cast< CFNumberRef >( CF::Number(  0 ).GetCFObject() ) );
        ASSERT_TRUE( n1 >= static_cast< CFNumberRef >( CF::Number( -1 ).GetCFObject() ) );
        ASSERT_TRUE( n2 >= static_cast< CFNumberRef >( CF::Number( 42 ).GetCFObject() ) );
        ASSERT_TRUE( n2 >= static_cast< CFNumberRef >( CF::Number( 41 ).GetCFObject() ) );
        ASSERT_TRUE( n3 >= static_cast< CFNumberRef >( CF::Number(  0 ).GetCFObject() ) );
        ASSERT_TRUE( n3 >= static_cast< CFNumberRef >( CF::Number( -1 ).GetCFObject() ) );
        
        ASSERT_FALSE( n1 >= static_cast< CFNumberRef >( CF::Number( 100 ).GetCFObject() ) );
        ASSERT_FALSE( n2 >= static_cast< CFNumberRef >( CF::Number( 100 ).GetCFObject() ) );
        ASSERT_FALSE( n3 >= static_cast< CFNumberRef >( CF::Number( 100 ).GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE( n1 >= static_cast< CFNumberRef >( n3.GetCFObject() ) );
        ASSERT_TRUE( n2 >= static_cast< CFNumberRef >( n3.GetCFObject() ) );
        ASSERT_TRUE( n3 >= static_cast< CFNumberRef >( n3.GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE( n1 >= static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
        ASSERT_TRUE( n2 >= static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
        ASSERT_TRUE( n3 >= static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
    }
}

template< typename T >
void TMPL_CFPP_Number_OperatorGreaterOrEqual_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( n1 >= static_cast< T >(  0 ) );
    ASSERT_TRUE( n1 >= static_cast< T >( -1 ) );
    ASSERT_TRUE( n2 >= static_cast< T >( 42 ) );
    ASSERT_TRUE( n2 >= static_cast< T >( 41 ) );
    ASSERT_TRUE( n3 >= static_cast< T >(  0 ) );
    ASSERT_TRUE( n3 >= static_cast< T >( -1 ) );
    
    ASSERT_FALSE( n1 >= static_cast< T >( 100 ) );
    ASSERT_FALSE( n2 >= static_cast< T >( 100 ) );
    ASSERT_FALSE( n3 >= static_cast< T >( 100 ) );
}

TEST( CFPP_Number, OperatorGreaterOrEqual_T )
{
    TMPL_CFPP_Number_OperatorGreaterOrEqual_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorGreaterOrEqual_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorGreaterOrEqual_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorGreaterOrEqual_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorGreaterOrEqual_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorGreaterOrEqual_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorGreaterOrEqual_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorGreaterOrEqual_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_OperatorGreaterOrEqual_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorGreaterOrEqual_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorLesserOrEqualNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE( n1 <= CF::Number(  0 ) );
        ASSERT_TRUE( n1 <= CF::Number(  1 ) );
        ASSERT_TRUE( n2 <= CF::Number( 42 ) );
        ASSERT_TRUE( n2 <= CF::Number( 43 ) );
        ASSERT_TRUE( n3 <= CF::Number(  0 ) );
        ASSERT_TRUE( n3 <= CF::Number(  1 ) );
        
        ASSERT_FALSE( n1 <= CF::Number( -100 ) );
        ASSERT_FALSE( n2 <= CF::Number( -100 ) );
        ASSERT_FALSE( n3 <= CF::Number( -100 ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE(  n1 <= n3 );
        ASSERT_FALSE( n2 <= n3 );
        ASSERT_TRUE(  n3 <= n3 );
    }
}

TEST( CFPP_Number, OperatorLesserOrEqualCFType )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE( n1 <= static_cast< CFTypeRef >( CF::Number(  0 ).GetCFObject() ) );
        ASSERT_TRUE( n1 <= static_cast< CFTypeRef >( CF::Number(  1 ).GetCFObject() ) );
        ASSERT_TRUE( n2 <= static_cast< CFTypeRef >( CF::Number( 42 ).GetCFObject() ) );
        ASSERT_TRUE( n2 <= static_cast< CFTypeRef >( CF::Number( 43 ).GetCFObject() ) );
        ASSERT_TRUE( n3 <= static_cast< CFTypeRef >( CF::Number(  0 ).GetCFObject() ) );
        ASSERT_TRUE( n3 <= static_cast< CFTypeRef >( CF::Number(  1 ).GetCFObject() ) );
        
        ASSERT_FALSE( n1 <= static_cast< CFTypeRef >( CF::Number( -100 ).GetCFObject() ) );
        ASSERT_FALSE( n2 <= static_cast< CFTypeRef >( CF::Number( -100 ).GetCFObject() ) );
        ASSERT_FALSE( n3 <= static_cast< CFTypeRef >( CF::Number( -100 ).GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE(  n1 <= static_cast< CFTypeRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n2 <= static_cast< CFTypeRef >( n3.GetCFObject() ) );
        ASSERT_TRUE(  n3 <= static_cast< CFTypeRef >( n3.GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE(  n1 <= static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n2 <= static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
        ASSERT_TRUE(  n3 <= static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
    }
}

TEST( CFPP_Number, OperatorLesserOrEqualCFNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE( n1 <= static_cast< CFNumberRef >( CF::Number(  0 ).GetCFObject() ) );
        ASSERT_TRUE( n1 <= static_cast< CFNumberRef >( CF::Number(  1 ).GetCFObject() ) );
        ASSERT_TRUE( n2 <= static_cast< CFNumberRef >( CF::Number( 42 ).GetCFObject() ) );
        ASSERT_TRUE( n2 <= static_cast< CFNumberRef >( CF::Number( 43 ).GetCFObject() ) );
        ASSERT_TRUE( n3 <= static_cast< CFNumberRef >( CF::Number(  0 ).GetCFObject() ) );
        ASSERT_TRUE( n3 <= static_cast< CFNumberRef >( CF::Number(  1 ).GetCFObject() ) );
        
        ASSERT_FALSE( n1 <= static_cast< CFNumberRef >( CF::Number( -100 ).GetCFObject() ) );
        ASSERT_FALSE( n2 <= static_cast< CFNumberRef >( CF::Number( -100 ).GetCFObject() ) );
        ASSERT_FALSE( n3 <= static_cast< CFNumberRef >( CF::Number( -100 ).GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE(  n1 <= static_cast< CFNumberRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n2 <= static_cast< CFNumberRef >( n3.GetCFObject() ) );
        ASSERT_TRUE(  n3 <= static_cast< CFNumberRef >( n3.GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_TRUE(  n1 <= static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n2 <= static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
        ASSERT_TRUE(  n3 <= static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
    }
}

template< typename T >
void TMPL_CFPP_Number_OperatorLesserOrEqual_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( n1 <= static_cast< T >(  0 ) );
    ASSERT_TRUE( n1 <= static_cast< T >(  1 ) );
    ASSERT_TRUE( n2 <= static_cast< T >( 42 ) );
    ASSERT_TRUE( n2 <= static_cast< T >( 43 ) );
    ASSERT_TRUE( n3 <= static_cast< T >(  0 ) );
    ASSERT_TRUE( n3 <= static_cast< T >(  1 ) );
    
    ASSERT_FALSE( n1 <= static_cast< T >( -100 ) );
    ASSERT_FALSE( n2 <= static_cast< T >( -100 ) );
    ASSERT_FALSE( n3 <= static_cast< T >( -100 ) );
}

TEST( CFPP_Number, OperatorLesserOrEqual_T )
{
    TMPL_CFPP_Number_OperatorLesserOrEqual_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorLesserOrEqual_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorLesserOrEqual_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorLesserOrEqual_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorLesserOrEqual_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorLesserOrEqual_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorLesserOrEqual_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorLesserOrEqual_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_OperatorLesserOrEqual_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorLesserOrEqual_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorGreaterNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 > CF::Number( 100 ) );
        ASSERT_FALSE( n2 > CF::Number( 100 ) );
        ASSERT_FALSE( n2 > CF::Number(  42 ) );
        ASSERT_FALSE( n3 > CF::Number( 100 ) );
        
        ASSERT_TRUE( n1 > CF::Number( -100 ) );
        ASSERT_TRUE( n2 > CF::Number( -100 ) );
        ASSERT_TRUE( n3 > CF::Number( -100 ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 > n3 );
        ASSERT_TRUE(  n2 > n3 );
        ASSERT_FALSE( n3 > n3 );
    }
}

TEST( CFPP_Number, OperatorGreaterCFType )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 > static_cast< CFTypeRef >( CF::Number( 100 ).GetCFObject() ) );
        ASSERT_FALSE( n2 > static_cast< CFTypeRef >( CF::Number( 100 ).GetCFObject() ) );
        ASSERT_FALSE( n2 > static_cast< CFTypeRef >( CF::Number(  42 ).GetCFObject() ) );
        ASSERT_FALSE( n3 > static_cast< CFTypeRef >( CF::Number( 100 ).GetCFObject() ) );
        
        ASSERT_TRUE( n1 > static_cast< CFTypeRef >( CF::Number( -100 ).GetCFObject() ) );
        ASSERT_TRUE( n2 > static_cast< CFTypeRef >( CF::Number( -100 ).GetCFObject() ) );
        ASSERT_TRUE( n3 > static_cast< CFTypeRef >( CF::Number( -100 ).GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 > static_cast< CFTypeRef >( n3.GetCFObject() ) );
        ASSERT_TRUE(  n2 > static_cast< CFTypeRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n3 > static_cast< CFTypeRef >( n3.GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 > static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
        ASSERT_TRUE(  n2 > static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n3 > static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
    }
}

TEST( CFPP_Number, OperatorGreaterCFNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 > static_cast< CFNumberRef >( CF::Number( 100 ).GetCFObject() ) );
        ASSERT_FALSE( n2 > static_cast< CFNumberRef >( CF::Number( 100 ).GetCFObject() ) );
        ASSERT_FALSE( n2 > static_cast< CFNumberRef >( CF::Number(  42 ).GetCFObject() ) );
        ASSERT_FALSE( n3 > static_cast< CFNumberRef >( CF::Number( 100 ).GetCFObject() ) );
        
        ASSERT_TRUE( n1 > static_cast< CFNumberRef >( CF::Number( -100 ).GetCFObject() ) );
        ASSERT_TRUE( n2 > static_cast< CFNumberRef >( CF::Number( -100 ).GetCFObject() ) );
        ASSERT_TRUE( n3 > static_cast< CFNumberRef >( CF::Number( -100 ).GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 > static_cast< CFNumberRef >( n3.GetCFObject() ) );
        ASSERT_TRUE(  n2 > static_cast< CFNumberRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n3 > static_cast< CFNumberRef >( n3.GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 > static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
        ASSERT_TRUE(  n2 > static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n3 > static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
    }
}

template< typename T >
void TMPL_CFPP_Number_OperatorGreater_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_FALSE( n1 > static_cast< T >( 100 ) );
    ASSERT_FALSE( n2 > static_cast< T >( 100 ) );
    ASSERT_FALSE( n2 > static_cast< T >(  42 ) );
    ASSERT_FALSE( n3 > static_cast< T >( 100 ) );
    
    ASSERT_TRUE( n1 > static_cast< T >( -100 ) );
    ASSERT_TRUE( n2 > static_cast< T >( -100 ) );
    ASSERT_TRUE( n3 > static_cast< T >( -100 ) );
}

TEST( CFPP_Number, OperatorGreater_T )
{
    TMPL_CFPP_Number_OperatorGreater_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorGreater_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorGreater_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorGreater_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorGreater_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorGreater_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorGreater_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorGreater_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_OperatorGreater_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorGreater_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorLesserNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 < CF::Number(  0 ) );
        ASSERT_FALSE( n2 < CF::Number(  0 ) );
        ASSERT_FALSE( n2 < CF::Number( 42 ) );
        ASSERT_FALSE( n3 < CF::Number(  0 ) );
        
        ASSERT_TRUE( n1 < CF::Number( 100 ) );
        ASSERT_TRUE( n2 < CF::Number( 100 ) );
        ASSERT_TRUE( n3 < CF::Number( 100 ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 < n3 );
        ASSERT_FALSE( n2 < n3 );
        ASSERT_FALSE( n3 < n3 );
    }
}

TEST( CFPP_Number, OperatorLesserCFType )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 < static_cast< CFTypeRef >( CF::Number(  0 ).GetCFObject() ) );
        ASSERT_FALSE( n2 < static_cast< CFTypeRef >( CF::Number(  0 ).GetCFObject() ) );
        ASSERT_FALSE( n2 < static_cast< CFTypeRef >( CF::Number( 42 ).GetCFObject() ) );
        ASSERT_FALSE( n3 < static_cast< CFTypeRef >( CF::Number(  0 ).GetCFObject() ) );
        
        ASSERT_TRUE( n1 < static_cast< CFTypeRef >( CF::Number( 100 ).GetCFObject() ) );
        ASSERT_TRUE( n2 < static_cast< CFTypeRef >( CF::Number( 100 ).GetCFObject() ) );
        ASSERT_TRUE( n3 < static_cast< CFTypeRef >( CF::Number( 100 ).GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 < static_cast< CFTypeRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n2 < static_cast< CFTypeRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n3 < static_cast< CFTypeRef >( n3.GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 < static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n2 < static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n3 < static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
    }
}

TEST( CFPP_Number, OperatorLesserCFNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 < static_cast< CFNumberRef >( CF::Number(  0 ).GetCFObject() ) );
        ASSERT_FALSE( n2 < static_cast< CFNumberRef >( CF::Number(  0 ).GetCFObject() ) );
        ASSERT_FALSE( n2 < static_cast< CFNumberRef >( CF::Number( 42 ).GetCFObject() ) );
        ASSERT_FALSE( n3 < static_cast< CFNumberRef >( CF::Number(  0 ).GetCFObject() ) );
        
        ASSERT_TRUE( n1 < static_cast< CFNumberRef >( CF::Number( 100 ).GetCFObject() ) );
        ASSERT_TRUE( n2 < static_cast< CFNumberRef >( CF::Number( 100 ).GetCFObject() ) );
        ASSERT_TRUE( n3 < static_cast< CFNumberRef >( CF::Number( 100 ).GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 < static_cast< CFNumberRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n2 < static_cast< CFNumberRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n3 < static_cast< CFNumberRef >( n3.GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 < static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n2 < static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n3 < static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
    }
}

template< typename T >
void TMPL_CFPP_Number_OperatorLesser_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_FALSE( n1 < static_cast< T >(  0 ) );
    ASSERT_FALSE( n2 < static_cast< T >(  0 ) );
    ASSERT_FALSE( n2 < static_cast< T >( 42 ) );
    ASSERT_FALSE( n3 < static_cast< T >(  0 ) );
    
    ASSERT_TRUE( n1 < static_cast< T >( 100 ) );
    ASSERT_TRUE( n2 < static_cast< T >( 100 ) );
    ASSERT_TRUE( n3 < static_cast< T >( 100 ) );
}

TEST( CFPP_Number, OperatorLesser_T )
{
    TMPL_CFPP_Number_OperatorLesser_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorLesser_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorLesser_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorLesser_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorLesser_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorLesser_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorLesser_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorLesser_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_OperatorLesser_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorLesser_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorAndNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 && CF::Number( 0 ) );
        ASSERT_FALSE( n2 && CF::Number( 0 ) );
        ASSERT_FALSE( n3 && CF::Number( 0 ) );
        
        ASSERT_FALSE( n1 && CF::Number( 1 ) );
        ASSERT_TRUE(  n2 && CF::Number( 1 ) );
        ASSERT_FALSE( n3 && CF::Number( 1 ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 && n3 );
        ASSERT_FALSE( n2 && n3 );
        ASSERT_FALSE( n3 && n3 );
    }
}

TEST( CFPP_Number, OperatorAndCFType )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 && static_cast< CFTypeRef >( CF::Number( 0 ).GetCFObject() ) );
        ASSERT_FALSE( n2 && static_cast< CFTypeRef >( CF::Number( 0 ).GetCFObject() ) );
        ASSERT_FALSE( n3 && static_cast< CFTypeRef >( CF::Number( 0 ).GetCFObject() ) );
        
        ASSERT_FALSE( n1 && static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ) );
        ASSERT_TRUE(  n2 && static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ) );
        ASSERT_FALSE( n3 && static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 && static_cast< CFTypeRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n2 && static_cast< CFTypeRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n3 && static_cast< CFTypeRef >( n3.GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 && static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n2 && static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n3 && static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
    }
}

TEST( CFPP_Number, OperatorAndCFNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 && static_cast< CFNumberRef >( CF::Number( 0 ).GetCFObject() ) );
        ASSERT_FALSE( n2 && static_cast< CFNumberRef >( CF::Number( 0 ).GetCFObject() ) );
        ASSERT_FALSE( n3 && static_cast< CFNumberRef >( CF::Number( 0 ).GetCFObject() ) );
        
        ASSERT_FALSE( n1 && static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ) );
        ASSERT_TRUE(  n2 && static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ) );
        ASSERT_FALSE( n3 && static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 && static_cast< CFNumberRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n2 && static_cast< CFNumberRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n3 && static_cast< CFNumberRef >( n3.GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 && static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n2 && static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n3 && static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
    }
}

template< typename T >
void TMPL_CFPP_Number_OperatorAnd_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_FALSE( n1 && static_cast< T >( 0 ) );
    ASSERT_FALSE( n2 && static_cast< T >( 0 ) );
    ASSERT_FALSE( n3 && static_cast< T >( 0 ) );
    
    ASSERT_FALSE( n1 && static_cast< T >( 1 ) );
    ASSERT_TRUE(  n2 && static_cast< T >( 1 ) );
    ASSERT_FALSE( n3 && static_cast< T >( 1 ) );
}

TEST( CFPP_Number, OperatorAnd_T )
{
    TMPL_CFPP_Number_OperatorAnd_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorAnd_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorAnd_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorAnd_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorAnd_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorAnd_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorAnd_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorAnd_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_OperatorAnd_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorAnd_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorOrNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 || CF::Number( 0 ) );
        ASSERT_TRUE(  n2 || CF::Number( 0 ) );
        ASSERT_FALSE( n3 || CF::Number( 0 ) );
        
        ASSERT_TRUE( n1 || CF::Number( 1 ) );
        ASSERT_TRUE( n2 || CF::Number( 1 ) );
        ASSERT_TRUE( n3 || CF::Number( 1 ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 || n3 );
        ASSERT_TRUE(  n2 || n3 );
        ASSERT_FALSE( n3 || n3 );
    }
}

TEST( CFPP_Number, OperatorOrCFType )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 || static_cast< CFTypeRef >( CF::Number( 0 ).GetCFObject() ) );
        ASSERT_TRUE(  n2 || static_cast< CFTypeRef >( CF::Number( 0 ).GetCFObject() ) );
        ASSERT_FALSE( n3 || static_cast< CFTypeRef >( CF::Number( 0 ).GetCFObject() ) );
        
        ASSERT_TRUE( n1 || static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ) );
        ASSERT_TRUE( n2 || static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ) );
        ASSERT_TRUE( n3 || static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 || static_cast< CFTypeRef >( n3.GetCFObject() ) );
        ASSERT_TRUE(  n2 || static_cast< CFTypeRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n3 || static_cast< CFTypeRef >( n3.GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 || static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
        ASSERT_TRUE(  n2 || static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n3 || static_cast< CFTypeRef >( CF::Array().GetCFObject() ) );
    }
}

TEST( CFPP_Number, OperatorOrCFNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 || static_cast< CFNumberRef >( CF::Number( 0 ).GetCFObject() ) );
        ASSERT_TRUE(  n2 || static_cast< CFNumberRef >( CF::Number( 0 ).GetCFObject() ) );
        ASSERT_FALSE( n3 || static_cast< CFNumberRef >( CF::Number( 0 ).GetCFObject() ) );
        
        ASSERT_TRUE( n1 || static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ) );
        ASSERT_TRUE( n2 || static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ) );
        ASSERT_TRUE( n3 || static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 || static_cast< CFNumberRef >( n3.GetCFObject() ) );
        ASSERT_TRUE(  n2 || static_cast< CFNumberRef >( n3.GetCFObject() ) );
        ASSERT_FALSE( n3 || static_cast< CFNumberRef >( n3.GetCFObject() ) );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        ASSERT_FALSE( n1 || static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
        ASSERT_TRUE(  n2 || static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
        ASSERT_FALSE( n3 || static_cast< CFNumberRef >( CF::Array().GetCFObject() ) );
    }
}

template< typename T >
void TMPL_CFPP_Number_OperatorOr_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_FALSE( n1 || static_cast< T >( 0 ) );
    ASSERT_TRUE(  n2 || static_cast< T >( 0 ) );
    ASSERT_FALSE( n3 || static_cast< T >( 0 ) );
    
    ASSERT_TRUE( n1 || static_cast< T >( 1 ) );
    ASSERT_TRUE( n2 || static_cast< T >( 1 ) );
    ASSERT_TRUE( n3 || static_cast< T >( 1 ) );
}

TEST( CFPP_Number, OperatorOr_T )
{
    TMPL_CFPP_Number_OperatorOr_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorOr_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorOr_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorOr_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorOr_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorOr_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorOr_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorOr_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_OperatorOr_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorOr_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorBitwiseNot )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( ~n1,  -1 );
    ASSERT_EQ( ~n2, -43 );
    ASSERT_EQ( ~n3,  -1 );
}

TEST( CFPP_Number, OperatorLogicalNot )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( !n1, 1 );
    ASSERT_EQ( !n2, 0 );
    ASSERT_EQ( !n3, 1 );
}

TEST( CFPP_Number, OperatorPrefixIncrement )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    CF::Number n4( 42.0 );
    
    ASSERT_EQ( ++n1,  1 );
    ASSERT_EQ( ++n2, 43 );
    ASSERT_EQ( ++n3,  1 );
    ASSERT_EQ( ++n4, 43 );
    
    ASSERT_EQ( n1,  1 );
    ASSERT_EQ( n2, 43 );
    ASSERT_EQ( n3,  1 );
    ASSERT_EQ( n4, 43 );
}

TEST( CFPP_Number, OperatorPosfixIncrement )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    CF::Number n4( 42.0 );
    
    ASSERT_EQ( n1++,  0 );
    ASSERT_EQ( n2++, 42 );
    ASSERT_EQ( n3++,  0 );
    ASSERT_EQ( n4++, 42 );
    
    ASSERT_EQ( n1,  1 );
    ASSERT_EQ( n2, 43 );
    ASSERT_EQ( n3,  1 );
    ASSERT_EQ( n4, 43 );
}

TEST( CFPP_Number, OperatorPrefixDecrement )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    CF::Number n4( 42.0 );
    
    ASSERT_EQ( --n1, -1 );
    ASSERT_EQ( --n2, 41 );
    ASSERT_EQ( --n3, -1 );
    ASSERT_EQ( --n4, 41 );
    
    ASSERT_EQ( n1, -1 );
    ASSERT_EQ( n2, 41 );
    ASSERT_EQ( n3, -1 );
    ASSERT_EQ( n4, 41 );
}

TEST( CFPP_Number, OperatorPostfixDecrement )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    CF::Number n4( 42.0 );
    
    ASSERT_EQ( n1--,  0 );
    ASSERT_EQ( n2--, 42 );
    ASSERT_EQ( n3--,  0 );
    ASSERT_EQ( n4--, 42 );
    
    ASSERT_EQ( n1, -1 );
    ASSERT_EQ( n2, 41 );
    ASSERT_EQ( n3, -1 );
    ASSERT_EQ( n4, 41 );
}

TEST( CFPP_Number, OperatorPlusEqualNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 += CF::Number( 10 );
        n2 += CF::Number( 10 );
        n3 += CF::Number( 10 );
        
        ASSERT_EQ( n1, 10 );
        ASSERT_EQ( n2, 52 );
        ASSERT_EQ( n3, 10 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 += n3;
        n2 += n3;
        n3 += n3;
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

TEST( CFPP_Number, OperatorPlusEqualCFType )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 += static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() );
        n2 += static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() );
        n3 += static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() );
        
        ASSERT_EQ( n1, 10 );
        ASSERT_EQ( n2, 52 );
        ASSERT_EQ( n3, 10 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 += static_cast< CFTypeRef >( n3.GetCFObject() );
        n2 += static_cast< CFTypeRef >( n3.GetCFObject() );
        n3 += static_cast< CFTypeRef >( n3.GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 += static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        n2 += static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        n3 += static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

TEST( CFPP_Number, OperatorPlusEqualCFNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 += static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() );
        n2 += static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() );
        n3 += static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() );
        
        ASSERT_EQ( n1, 10 );
        ASSERT_EQ( n2, 52 );
        ASSERT_EQ( n3, 10 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 += static_cast< CFNumberRef >( n3.GetCFObject() );
        n2 += static_cast< CFNumberRef >( n3.GetCFObject() );
        n3 += static_cast< CFNumberRef >( n3.GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 += static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        n2 += static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        n3 += static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

template< typename T >
void TMPL_CFPP_Number_OperatorPlusEqual_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    n1 += static_cast< T >( 10 );
    n2 += static_cast< T >( 10 );
    n3 += static_cast< T >( 10 );
    
    ASSERT_EQ( n1, 10 );
    ASSERT_EQ( n2, 52 );
    ASSERT_EQ( n3, 10 );
}

TEST( CFPP_Number, OperatorPlusEqual_T )
{
    TMPL_CFPP_Number_OperatorPlusEqual_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorPlusEqual_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorPlusEqual_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorPlusEqual_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorPlusEqual_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorPlusEqual_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorPlusEqual_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorPlusEqual_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_OperatorPlusEqual_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorPlusEqual_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorMinusEqualNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 -= CF::Number( 10 );
        n2 -= CF::Number( 10 );
        n3 -= CF::Number( 10 );
        
        ASSERT_EQ( n1, -10 );
        ASSERT_EQ( n2,  32 );
        ASSERT_EQ( n3, -10 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 -= n3;
        n2 -= n3;
        n3 -= n3;
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

TEST( CFPP_Number, OperatorMinusEqualCFType )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 -= static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() );
        n2 -= static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() );
        n3 -= static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() );
        
        ASSERT_EQ( n1, -10 );
        ASSERT_EQ( n2,  32 );
        ASSERT_EQ( n3, -10 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 -= static_cast< CFTypeRef >( n3.GetCFObject() );
        n2 -= static_cast< CFTypeRef >( n3.GetCFObject() );
        n3 -= static_cast< CFTypeRef >( n3.GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 -= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        n2 -= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        n3 -= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

TEST( CFPP_Number, OperatorMinusEqualCFNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 -= static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() );
        n2 -= static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() );
        n3 -= static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() );
        
        ASSERT_EQ( n1, -10 );
        ASSERT_EQ( n2,  32 );
        ASSERT_EQ( n3, -10 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 -= static_cast< CFNumberRef >( n3.GetCFObject() );
        n2 -= static_cast< CFNumberRef >( n3.GetCFObject() );
        n3 -= static_cast< CFNumberRef >( n3.GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 -= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        n2 -= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        n3 -= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

template< typename T >
void TMPL_CFPP_Number_OperatorMinusEqual_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    n1 -= static_cast< T >( 10 );
    n2 -= static_cast< T >( 10 );
    n3 -= static_cast< T >( 10 );
    
    ASSERT_EQ( n1, -10 );
    ASSERT_EQ( n2,  32 );
    ASSERT_EQ( n3, -10 );
}

TEST( CFPP_Number, OperatorMinusEqual_T )
{
    TMPL_CFPP_Number_OperatorMinusEqual_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorMinusEqual_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorMinusEqual_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorMinusEqual_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorMinusEqual_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorMinusEqual_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorMinusEqual_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorMinusEqual_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_OperatorMinusEqual_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorMinusEqual_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorMultiplyEqualNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 *= CF::Number( 10 );
        n2 *= CF::Number( 10 );
        n3 *= CF::Number( 10 );
        
        ASSERT_EQ( n1,   0 );
        ASSERT_EQ( n2, 420 );
        ASSERT_EQ( n3,   0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 *= n3;
        n2 *= n3;
        n3 *= n3;
        
        ASSERT_EQ( n1, 0 );
        ASSERT_EQ( n2, 0 );
        ASSERT_EQ( n3, 0 );
    }
}

TEST( CFPP_Number, OperatorMultiplyEqualCFType )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 *= static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() );
        n2 *= static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() );
        n3 *= static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() );
        
        ASSERT_EQ( n1,   0 );
        ASSERT_EQ( n2, 420 );
        ASSERT_EQ( n3,   0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 *= static_cast< CFTypeRef >( n3.GetCFObject() );
        n2 *= static_cast< CFTypeRef >( n3.GetCFObject() );
        n3 *= static_cast< CFTypeRef >( n3.GetCFObject() );
        
        ASSERT_EQ( n1, 0 );
        ASSERT_EQ( n2, 0 );
        ASSERT_EQ( n3, 0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 *= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        n2 *= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        n3 *= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        
        ASSERT_EQ( n1, 0 );
        ASSERT_EQ( n2, 0 );
        ASSERT_EQ( n3, 0 );
    }
}

TEST( CFPP_Number, OperatorMultiplyEqualCFNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 *= static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() );
        n2 *= static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() );
        n3 *= static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() );
        
        ASSERT_EQ( n1,   0 );
        ASSERT_EQ( n2, 420 );
        ASSERT_EQ( n3,   0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 *= static_cast< CFNumberRef >( n3.GetCFObject() );
        n2 *= static_cast< CFNumberRef >( n3.GetCFObject() );
        n3 *= static_cast< CFNumberRef >( n3.GetCFObject() );
        
        ASSERT_EQ( n1, 0 );
        ASSERT_EQ( n2, 0 );
        ASSERT_EQ( n3, 0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 *= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        n2 *= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        n3 *= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        
        ASSERT_EQ( n1, 0 );
        ASSERT_EQ( n2, 0 );
        ASSERT_EQ( n3, 0 );
    }
}

template< typename T >
void TMPL_CFPP_Number_OperatorMultiplyEqual_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    n1 *= static_cast< T >( 10 );
    n2 *= static_cast< T >( 10 );
    n3 *= static_cast< T >( 10 );
    
    ASSERT_EQ( n1,   0 );
    ASSERT_EQ( n2, 420 );
    ASSERT_EQ( n3,   0 );
}

TEST( CFPP_Number, OperatorMultiplyEqual_T )
{
    TMPL_CFPP_Number_OperatorMultiplyEqual_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorMultiplyEqual_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorMultiplyEqual_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorMultiplyEqual_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorMultiplyEqual_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorMultiplyEqual_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorMultiplyEqual_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorMultiplyEqual_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_OperatorMultiplyEqual_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorMultiplyEqual_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorDivideEqualNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    n1 /= CF::Number( 10 );
    n2 /= CF::Number( 10 );
    n3 /= CF::Number( 10 );
    
    ASSERT_TRUE( FloatIsEqual( n1, 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2, 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3, 0.0 ) );
    
    ASSERT_THROW( n1 /= n3, std::runtime_error );
    ASSERT_THROW( n2 /= n3, std::runtime_error );
    ASSERT_THROW( n3 /= n3, std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideEqualCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    n1 /= static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() );
    n2 /= static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() );
    n3 /= static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() );
    
    ASSERT_TRUE( FloatIsEqual( n1, 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2, 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3, 0.0 ) );
    
    ASSERT_THROW( n1 /= static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 /= static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 /= static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    
    ASSERT_THROW( n1 /= static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 /= static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 /= static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideEqualCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    n1 /= static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() );
    n2 /= static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() );
    n3 /= static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() );
    
    ASSERT_TRUE( FloatIsEqual( n1, 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2, 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3, 0.0 ) );
    
    ASSERT_THROW( n1 /= static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 /= static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 /= static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    
    ASSERT_THROW( n1 /= static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 /= static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 /= static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
}

template< typename T >
void TMPL_CFPP_Number_OperatorDivideEqual_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    n1 /= static_cast< T >( 10 );
    n2 /= static_cast< T >( 10 );
    n3 /= static_cast< T >( 10 );
    
    ASSERT_TRUE( FloatIsEqual( n1, 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2, 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3, 0.0 ) );
    
    ASSERT_THROW( n1 /= static_cast< T >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 /= static_cast< T >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 /= static_cast< T >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideEqual_T )
{
    TMPL_CFPP_Number_OperatorDivideEqual_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorDivideEqual_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorDivideEqual_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorDivideEqual_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorDivideEqual_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorDivideEqual_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorDivideEqual_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorDivideEqual_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_OperatorDivideEqual_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorDivideEqual_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorOrEqualNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 |= CF::Number( 21 );
        n2 |= CF::Number( 21 );
        n3 |= CF::Number( 21 );
        
        ASSERT_EQ( n1, 21 );
        ASSERT_EQ( n2, 63 );
        ASSERT_EQ( n3, 21 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 |= n3;
        n2 |= n3;
        n3 |= n3;
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

TEST( CFPP_Number, OperatorOrEqualCFType )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 |= static_cast< CFTypeRef >( CF::Number( 21 ).GetCFObject() );
        n2 |= static_cast< CFTypeRef >( CF::Number( 21 ).GetCFObject() );
        n3 |= static_cast< CFTypeRef >( CF::Number( 21 ).GetCFObject() );
        
        ASSERT_EQ( n1, 21 );
        ASSERT_EQ( n2, 63 );
        ASSERT_EQ( n3, 21 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 |= static_cast< CFTypeRef >( n3.GetCFObject() );
        n2 |= static_cast< CFTypeRef >( n3.GetCFObject() );
        n3 |= static_cast< CFTypeRef >( n3.GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 |= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        n2 |= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        n3 |= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

TEST( CFPP_Number, OperatorOrEqualCFNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 |= static_cast< CFNumberRef >( CF::Number( 21 ).GetCFObject() );
        n2 |= static_cast< CFNumberRef >( CF::Number( 21 ).GetCFObject() );
        n3 |= static_cast< CFNumberRef >( CF::Number( 21 ).GetCFObject() );
        
        ASSERT_EQ( n1, 21 );
        ASSERT_EQ( n2, 63 );
        ASSERT_EQ( n3, 21 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 |= static_cast< CFNumberRef >( n3.GetCFObject() );
        n2 |= static_cast< CFNumberRef >( n3.GetCFObject() );
        n3 |= static_cast< CFNumberRef >( n3.GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 |= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        n2 |= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        n3 |= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

template< typename T >
void TMPL_CFPP_Number_OperatorOrEqual_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    n1 |= static_cast< T >( 21 );
    n2 |= static_cast< T >( 21 );
    n3 |= static_cast< T >( 21 );
    
    ASSERT_EQ( n1, 21 );
    ASSERT_EQ( n2, 63 );
    ASSERT_EQ( n3, 21 );
}

TEST( CFPP_Number, OperatorOrEqual_T )
{
    TMPL_CFPP_Number_OperatorOrEqual_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorOrEqual_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorOrEqual_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorOrEqual_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorOrEqual_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorOrEqual_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorOrEqual_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorOrEqual_T< CF::Number::UInt64 >();
}

TEST( CFPP_Number, OperatorAndEqualNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 &= CF::Number( 12 );
        n2 &= CF::Number( 12 );
        n3 &= CF::Number( 12 );
        
        ASSERT_EQ( n1, 0 );
        ASSERT_EQ( n2, 8 );
        ASSERT_EQ( n3, 0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 &= n3;
        n2 &= n3;
        n3 &= n3;
        
        ASSERT_EQ( n1, 0 );
        ASSERT_EQ( n2, 0 );
        ASSERT_EQ( n3, 0 );
    }
}

TEST( CFPP_Number, OperatorAndEqualCFType )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 &= static_cast< CFTypeRef >( CF::Number( 12 ).GetCFObject() );
        n2 &= static_cast< CFTypeRef >( CF::Number( 12 ).GetCFObject() );
        n3 &= static_cast< CFTypeRef >( CF::Number( 12 ).GetCFObject() );
        
        ASSERT_EQ( n1, 0 );
        ASSERT_EQ( n2, 8 );
        ASSERT_EQ( n3, 0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 &= static_cast< CFTypeRef >( n3.GetCFObject() );
        n2 &= static_cast< CFTypeRef >( n3.GetCFObject() );
        n3 &= static_cast< CFTypeRef >( n3.GetCFObject() );
        
        ASSERT_EQ( n1, 0 );
        ASSERT_EQ( n2, 0 );
        ASSERT_EQ( n3, 0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 &= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        n2 &= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        n3 &= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        
        ASSERT_EQ( n1, 0 );
        ASSERT_EQ( n2, 0 );
        ASSERT_EQ( n3, 0 );
    }
}

TEST( CFPP_Number, OperatorAndEqualCFNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 &= static_cast< CFNumberRef >( CF::Number( 12 ).GetCFObject() );
        n2 &= static_cast< CFNumberRef >( CF::Number( 12 ).GetCFObject() );
        n3 &= static_cast< CFNumberRef >( CF::Number( 12 ).GetCFObject() );
        
        ASSERT_EQ( n1, 0 );
        ASSERT_EQ( n2, 8 );
        ASSERT_EQ( n3, 0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 &= static_cast< CFNumberRef >( n3.GetCFObject() );
        n2 &= static_cast< CFNumberRef >( n3.GetCFObject() );
        n3 &= static_cast< CFNumberRef >( n3.GetCFObject() );
        
        ASSERT_EQ( n1, 0 );
        ASSERT_EQ( n2, 0 );
        ASSERT_EQ( n3, 0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 &= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        n2 &= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        n3 &= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        
        ASSERT_EQ( n1, 0 );
        ASSERT_EQ( n2, 0 );
        ASSERT_EQ( n3, 0 );
    }
}

template< typename T >
void TMPL_CFPP_Number_OperatorAndEqual_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    n1 &= static_cast< T >( 12 );
    n2 &= static_cast< T >( 12 );
    n3 &= static_cast< T >( 12 );
    
    ASSERT_EQ( n1, 0 );
    ASSERT_EQ( n2, 8 );
    ASSERT_EQ( n3, 0 );
}

TEST( CFPP_Number, OperatorAndEqual_T )
{
    TMPL_CFPP_Number_OperatorAndEqual_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorAndEqual_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorAndEqual_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorAndEqual_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorAndEqual_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorAndEqual_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorAndEqual_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorAndEqual_T< CF::Number::UInt64 >();
}

TEST( CFPP_Number, OperatorModEqualNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    n1 %= CF::Number( 10 );
    n2 %= CF::Number( 10 );
    n3 %= CF::Number( 10 );
    
    ASSERT_EQ( n1, 0 );
    ASSERT_EQ( n2, 2 );
    ASSERT_EQ( n3, 0 );
    
    ASSERT_THROW( n1 %= n3, std::runtime_error );
    ASSERT_THROW( n2 %= n3, std::runtime_error );
    ASSERT_THROW( n3 %= n3, std::runtime_error );
}

TEST( CFPP_Number, OperatorModEqualCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    n1 %= static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() );
    n2 %= static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() );
    n3 %= static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() );
    
    ASSERT_EQ( n1, 0 );
    ASSERT_EQ( n2, 2 );
    ASSERT_EQ( n3, 0 );
    
    ASSERT_THROW( n1 %= static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 %= static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 %= static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    
    ASSERT_THROW( n1 %= static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 %= static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 %= static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModEqualCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    n1 %= static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() );
    n2 %= static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() );
    n3 %= static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() );
    
    ASSERT_EQ( n1, 0 );
    ASSERT_EQ( n2, 2 );
    ASSERT_EQ( n3, 0 );
    
    ASSERT_THROW( n1 %= static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 %= static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 %= static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    
    ASSERT_THROW( n1 %= static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 %= static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 %= static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
}

template< typename T >
void TMPL_CFPP_Number_OperatorModEqual_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    n1 %= static_cast< T >( 10 );
    n2 %= static_cast< T >( 10 );
    n3 %= static_cast< T >( 10 );
    
    ASSERT_EQ( n1, 0 );
    ASSERT_EQ( n2, 2 );
    ASSERT_EQ( n3, 0 );
    
    ASSERT_THROW( n1 %= static_cast< T >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 %= static_cast< T >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 %= static_cast< T >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModEqual_T )
{
    TMPL_CFPP_Number_OperatorModEqual_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorModEqual_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorModEqual_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorModEqual_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorModEqual_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorModEqual_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorModEqual_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorModEqual_T< CF::Number::UInt64 >();
}

TEST( CFPP_Number, OperatorXorEqualNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 ^= CF::Number( 43 );
        n2 ^= CF::Number( 43 );
        n3 ^= CF::Number( 43 );
        
        ASSERT_EQ( n1, 43 );
        ASSERT_EQ( n2,  1 );
        ASSERT_EQ( n3, 43 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 ^= n3;
        n2 ^= n3;
        n3 ^= n3;
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

TEST( CFPP_Number, OperatorXorEqualCFType )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 ^= static_cast< CFTypeRef >( CF::Number( 43 ).GetCFObject() );
        n2 ^= static_cast< CFTypeRef >( CF::Number( 43 ).GetCFObject() );
        n3 ^= static_cast< CFTypeRef >( CF::Number( 43 ).GetCFObject() );
        
        ASSERT_EQ( n1, 43 );
        ASSERT_EQ( n2,  1 );
        ASSERT_EQ( n3, 43 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 ^= static_cast< CFTypeRef >( n3.GetCFObject() );
        n2 ^= static_cast< CFTypeRef >( n3.GetCFObject() );
        n3 ^= static_cast< CFTypeRef >( n3.GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 ^= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        n2 ^= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        n3 ^= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

TEST( CFPP_Number, OperatorXorEqualCFNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 ^= static_cast< CFNumberRef >( CF::Number( 43 ).GetCFObject() );
        n2 ^= static_cast< CFNumberRef >( CF::Number( 43 ).GetCFObject() );
        n3 ^= static_cast< CFNumberRef >( CF::Number( 43 ).GetCFObject() );
        
        ASSERT_EQ( n1, 43 );
        ASSERT_EQ( n2,  1 );
        ASSERT_EQ( n3, 43 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 ^= static_cast< CFNumberRef >( n3.GetCFObject() );
        n2 ^= static_cast< CFNumberRef >( n3.GetCFObject() );
        n3 ^= static_cast< CFNumberRef >( n3.GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 ^= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        n2 ^= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        n3 ^= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

template< typename T >
void TMPL_CFPP_Number_OperatorXorEqual_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    n1 ^= static_cast< T >( 43 );
    n2 ^= static_cast< T >( 43 );
    n3 ^= static_cast< T >( 43 );
    
    ASSERT_EQ( n1, 43 );
    ASSERT_EQ( n2,  1 );
    ASSERT_EQ( n3, 43 );
}

TEST( CFPP_Number, OperatorXorEqual_T )
{
    TMPL_CFPP_Number_OperatorXorEqual_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorXorEqual_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorXorEqual_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorXorEqual_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorXorEqual_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorXorEqual_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorXorEqual_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorXorEqual_T< CF::Number::UInt64 >();
}

TEST( CFPP_Number, OperatorLeftShiftEqualNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 <<= CF::Number( 1 );
        n2 <<= CF::Number( 1 );
        n3 <<= CF::Number( 1 );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 84 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 <<= n3;
        n2 <<= n3;
        n3 <<= n3;
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

TEST( CFPP_Number, OperatorLeftShiftEqualCFType )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 <<= static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() );
        n2 <<= static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() );
        n3 <<= static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 84 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 <<= static_cast< CFTypeRef >( n3.GetCFObject() );
        n2 <<= static_cast< CFTypeRef >( n3.GetCFObject() );
        n3 <<= static_cast< CFTypeRef >( n3.GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 <<= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        n2 <<= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        n3 <<= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

TEST( CFPP_Number, OperatorLeftShiftEqualCFNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 <<= static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() );
        n2 <<= static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() );
        n3 <<= static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 84 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 <<= static_cast< CFNumberRef >( n3.GetCFObject() );
        n2 <<= static_cast< CFNumberRef >( n3.GetCFObject() );
        n3 <<= static_cast< CFNumberRef >( n3.GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 <<= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        n2 <<= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        n3 <<= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

template< typename T >
void TMPL_CFPP_Number_OperatorLeftShiftEqual_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    n1 <<= static_cast< T >( 1 );
    n2 <<= static_cast< T >( 1 );
    n3 <<= static_cast< T >( 1 );
    
    ASSERT_EQ( n1,  0 );
    ASSERT_EQ( n2, 84 );
    ASSERT_EQ( n3,  0 );
}

TEST( CFPP_Number, OperatorLeftShiftEqual_T )
{
    TMPL_CFPP_Number_OperatorLeftShiftEqual_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorLeftShiftEqual_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorLeftShiftEqual_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorLeftShiftEqual_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorLeftShiftEqual_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorLeftShiftEqual_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorLeftShiftEqual_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorLeftShiftEqual_T< CF::Number::UInt64 >();
}

TEST( CFPP_Number, OperatorRightShiftEqualNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 >>= CF::Number( 1 );
        n2 >>= CF::Number( 1 );
        n3 >>= CF::Number( 1 );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 21 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 >>= n3;
        n2 >>= n3;
        n3 >>= n3;
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

TEST( CFPP_Number, OperatorRightShiftEqualCFType )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 >>= static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() );
        n2 >>= static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() );
        n3 >>= static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 21 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 >>= static_cast< CFTypeRef >( n3.GetCFObject() );
        n2 >>= static_cast< CFTypeRef >( n3.GetCFObject() );
        n3 >>= static_cast< CFTypeRef >( n3.GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 >>= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        n2 >>= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        n3 >>= static_cast< CFTypeRef >( CF::Array().GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

TEST( CFPP_Number, OperatorRightShiftEqualCFNumber )
{
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 >>= static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() );
        n2 >>= static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() );
        n3 >>= static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 21 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 >>= static_cast< CFNumberRef >( n3.GetCFObject() );
        n2 >>= static_cast< CFNumberRef >( n3.GetCFObject() );
        n3 >>= static_cast< CFNumberRef >( n3.GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
    
    {
        CF::Number n1;
        CF::Number n2( 42 );
        CF::Number n3( static_cast< CFNumberRef >( NULL ) );
        
        n1 >>= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        n2 >>= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        n3 >>= static_cast< CFNumberRef >( CF::Array().GetCFObject() );
        
        ASSERT_EQ( n1,  0 );
        ASSERT_EQ( n2, 42 );
        ASSERT_EQ( n3,  0 );
    }
}

template< typename T >
void TMPL_CFPP_Number_OperatorRightShiftEqual_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    n1 >>= static_cast< T >( 1 );
    n2 >>= static_cast< T >( 1 );
    n3 >>= static_cast< T >( 1 );
    
    ASSERT_EQ( n1,  0 );
    ASSERT_EQ( n2, 21 );
    ASSERT_EQ( n3,  0 );
}

TEST( CFPP_Number, OperatorRightShiftEqual_T )
{
    TMPL_CFPP_Number_OperatorRightShiftEqual_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorRightShiftEqual_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorRightShiftEqual_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorRightShiftEqual_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorRightShiftEqual_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorRightShiftEqual_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorRightShiftEqual_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorRightShiftEqual_T< CF::Number::UInt64 >();
}

TEST( CFPP_Number, OperatorPlusNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 + CF::Number( 10 ), 10 );
    ASSERT_EQ( n2 + CF::Number( 10 ), 52 );
    ASSERT_EQ( n3 + CF::Number( 10 ), 10 );
    
    ASSERT_EQ( n1 + n3,  0 );
    ASSERT_EQ( n2 + n3, 42 );
    ASSERT_EQ( n3 + n3,  0 );
}

TEST( CFPP_Number, OperatorPlusCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 + static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 10 );
    ASSERT_EQ( n2 + static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 52 );
    ASSERT_EQ( n3 + static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 10 );
    
    ASSERT_EQ( n1 + static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 + static_cast< CFTypeRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 + static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 + static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 + static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 + static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorPlusCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 + static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 10 );
    ASSERT_EQ( n2 + static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 52 );
    ASSERT_EQ( n3 + static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 10 );
    
    ASSERT_EQ( n1 + static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 + static_cast< CFNumberRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 + static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 + static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 + static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 + static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
}

template< typename T >
void TMPL_CFPP_Number_OperatorPlus_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 + static_cast< T >( 10 ), 10 );
    ASSERT_EQ( n2 + static_cast< T >( 10 ), 52 );
    ASSERT_EQ( n3 + static_cast< T >( 10 ), 10 );
}

TEST( CFPP_Number, OperatorPlus_T )
{
    TMPL_CFPP_Number_OperatorPlus_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorPlus_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorPlus_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorPlus_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorPlus_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorPlus_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorPlus_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorPlus_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_OperatorPlus_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorPlus_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorMinusNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 - CF::Number( 10 ), -10 );
    ASSERT_EQ( n2 - CF::Number( 10 ),  32 );
    ASSERT_EQ( n3 - CF::Number( 10 ), -10 );
    
    ASSERT_EQ( n1 - n3,  0 );
    ASSERT_EQ( n2 - n3, 42 );
    ASSERT_EQ( n3 - n3,  0 );
}

TEST( CFPP_Number, OperatorMinusCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 - static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), -10 );
    ASSERT_EQ( n2 - static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ),  32 );
    ASSERT_EQ( n3 - static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), -10 );
    
    ASSERT_EQ( n1 - static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 - static_cast< CFTypeRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 - static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 - static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 - static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 - static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorMinusCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 - static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), -10 );
    ASSERT_EQ( n2 - static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ),  32 );
    ASSERT_EQ( n3 - static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), -10 );
    
    ASSERT_EQ( n1 - static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 - static_cast< CFNumberRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 - static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 - static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 - static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 - static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
}

template< typename T >
void TMPL_CFPP_Number_OperatorMinus_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 - static_cast< T >( 10 ), -10 );
    ASSERT_EQ( n2 - static_cast< T >( 10 ),  32 );
    ASSERT_EQ( n3 - static_cast< T >( 10 ), -10 );
}

TEST( CFPP_Number, OperatorMinus_T )
{
    TMPL_CFPP_Number_OperatorMinus_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorMinus_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorMinus_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorMinus_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorMinus_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorMinus_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorMinus_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorMinus_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_OperatorMinus_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorMinus_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorMultiplyNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * CF::Number( 10 ),   0 );
    ASSERT_EQ( n2 * CF::Number( 10 ), 420 );
    ASSERT_EQ( n3 * CF::Number( 10 ),   0 );
    
    ASSERT_EQ( n1 * n3, 0 );
    ASSERT_EQ( n2 * n3, 0 );
    ASSERT_EQ( n3 * n3, 0 );
}

TEST( CFPP_Number, OperatorMultiplyCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ),   0 );
    ASSERT_EQ( n2 * static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 420 );
    ASSERT_EQ( n3 * static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ),   0 );
    
    ASSERT_EQ( n1 * static_cast< CFTypeRef >( n3.GetCFObject() ), 0 );
    ASSERT_EQ( n2 * static_cast< CFTypeRef >( n3.GetCFObject() ), 0 );
    ASSERT_EQ( n3 * static_cast< CFTypeRef >( n3.GetCFObject() ), 0 );
    
    ASSERT_EQ( n1 * static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 0 );
    ASSERT_EQ( n2 * static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 0 );
    ASSERT_EQ( n3 * static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 0 );
}

TEST( CFPP_Number, OperatorMultiplyCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ),   0 );
    ASSERT_EQ( n2 * static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 420 );
    ASSERT_EQ( n3 * static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ),   0 );
    
    ASSERT_EQ( n1 * static_cast< CFNumberRef >( n3.GetCFObject() ), 0 );
    ASSERT_EQ( n2 * static_cast< CFNumberRef >( n3.GetCFObject() ), 0 );
    ASSERT_EQ( n3 * static_cast< CFNumberRef >( n3.GetCFObject() ), 0 );
    
    ASSERT_EQ( n1 * static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 0 );
    ASSERT_EQ( n2 * static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 0 );
    ASSERT_EQ( n3 * static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 0 );
}

template< typename T >
void TMPL_CFPP_Number_OperatorMultiply_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * static_cast< T >( 10 ),   0 );
    ASSERT_EQ( n2 * static_cast< T >( 10 ), 420 );
    ASSERT_EQ( n3 * static_cast< T >( 10 ),   0 );
}

TEST( CFPP_Number, OperatorMultiply_T )
{
    TMPL_CFPP_Number_OperatorMultiply_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorMultiply_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorMultiply_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorMultiply_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorMultiply_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorMultiply_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorMultiply_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorMultiply_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_OperatorMultiply_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorMultiply_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorDivideNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / CF::Number( 10 ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / CF::Number( 10 ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / CF::Number( 10 ), 0.0 ) );
    
    ASSERT_THROW( n1 / n3, std::runtime_error );
    ASSERT_THROW( n2 / n3, std::runtime_error );
    ASSERT_THROW( n3 / n3, std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 0.0 ) );
    
    ASSERT_THROW( n1 / static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    
    ASSERT_THROW( n1 / static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 0.0 ) );
    
    ASSERT_THROW( n1 / static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    
    ASSERT_THROW( n1 / static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
}

template< typename T >
void TMPL_CFPP_Number_OperatorDivide_T( void )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / static_cast< T >( 10 ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / static_cast< T >( 10 ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / static_cast< T >( 10 ), 0.0 ) );
    
    ASSERT_THROW( n1 / static_cast< T >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< T >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< T >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorDivide_T )
{
    TMPL_CFPP_Number_OperatorDivide_T< CF::Number::SInt8 >();
    TMPL_CFPP_Number_OperatorDivide_T< CF::Number::SInt16 >();
    TMPL_CFPP_Number_OperatorDivide_T< CF::Number::SInt32 >();
    TMPL_CFPP_Number_OperatorDivide_T< CF::Number::SInt64 >();
    TMPL_CFPP_Number_OperatorDivide_T< CF::Number::UInt8 >();
    TMPL_CFPP_Number_OperatorDivide_T< CF::Number::UInt16 >();
    TMPL_CFPP_Number_OperatorDivide_T< CF::Number::UInt32 >();
    TMPL_CFPP_Number_OperatorDivide_T< CF::Number::UInt64 >();
    TMPL_CFPP_Number_OperatorDivide_T< CF::Number::Float32 >();
    TMPL_CFPP_Number_OperatorDivide_T< CF::Number::Float64 >();
}

TEST( CFPP_Number, OperatorModNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % CF::Number( 10 ), 0 );
    ASSERT_EQ( n2 % CF::Number( 10 ), 2 );
    ASSERT_EQ( n3 % CF::Number( 10 ), 0 );
    
    ASSERT_THROW( n1 % n3, std::runtime_error );
    ASSERT_THROW( n2 % n3, std::runtime_error );
    ASSERT_THROW( n3 % n3, std::runtime_error );
}

TEST( CFPP_Number, OperatorModCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 0 );
    ASSERT_EQ( n2 % static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 2 );
    ASSERT_EQ( n3 % static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    
    ASSERT_THROW( n1 % static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 0 );
    ASSERT_EQ( n2 % static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 2 );
    ASSERT_EQ( n3 % static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    
    ASSERT_THROW( n1 % static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModSInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CF::Number::SInt8 >( 10 ), 0 );
    ASSERT_EQ( n2 % static_cast< CF::Number::SInt8 >( 10 ), 2 );
    ASSERT_EQ( n3 % static_cast< CF::Number::SInt8 >( 10 ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CF::Number::SInt8 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CF::Number::SInt8 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CF::Number::SInt8 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModSInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CF::Number::SInt16 >( 10 ), 0 );
    ASSERT_EQ( n2 % static_cast< CF::Number::SInt16 >( 10 ), 2 );
    ASSERT_EQ( n3 % static_cast< CF::Number::SInt16 >( 10 ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CF::Number::SInt16 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CF::Number::SInt16 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CF::Number::SInt16 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModSInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CF::Number::SInt32 >( 10 ), 0 );
    ASSERT_EQ( n2 % static_cast< CF::Number::SInt32 >( 10 ), 2 );
    ASSERT_EQ( n3 % static_cast< CF::Number::SInt32 >( 10 ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CF::Number::SInt32 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CF::Number::SInt32 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CF::Number::SInt32 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModSInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CF::Number::SInt64 >( 10 ), 0 );
    ASSERT_EQ( n2 % static_cast< CF::Number::SInt64 >( 10 ), 2 );
    ASSERT_EQ( n3 % static_cast< CF::Number::SInt64 >( 10 ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CF::Number::SInt64 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CF::Number::SInt64 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CF::Number::SInt64 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModUInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CF::Number::UInt8 >( 10 ), 0 );
    ASSERT_EQ( n2 % static_cast< CF::Number::UInt8 >( 10 ), 2 );
    ASSERT_EQ( n3 % static_cast< CF::Number::UInt8 >( 10 ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CF::Number::UInt8 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CF::Number::UInt8 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CF::Number::UInt8 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModUInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CF::Number::UInt16 >( 10 ), 0 );
    ASSERT_EQ( n2 % static_cast< CF::Number::UInt16 >( 10 ), 2 );
    ASSERT_EQ( n3 % static_cast< CF::Number::UInt16 >( 10 ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CF::Number::UInt16 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CF::Number::UInt16 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CF::Number::UInt16 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModUInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CF::Number::UInt32 >( 10 ), 0 );
    ASSERT_EQ( n2 % static_cast< CF::Number::UInt32 >( 10 ), 2 );
    ASSERT_EQ( n3 % static_cast< CF::Number::UInt32 >( 10 ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CF::Number::UInt32 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CF::Number::UInt32 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CF::Number::UInt32 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModUInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CF::Number::UInt64 >( 10 ), 0 );
    ASSERT_EQ( n2 % static_cast< CF::Number::UInt64 >( 10 ), 2 );
    ASSERT_EQ( n3 % static_cast< CF::Number::UInt64 >( 10 ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CF::Number::UInt64 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CF::Number::UInt64 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CF::Number::UInt64 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorBitwiseAndNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & CF::Number( 12 ), 0 );
    ASSERT_EQ( n2 & CF::Number( 12 ), 8 );
    ASSERT_EQ( n3 & CF::Number( 12 ), 0 );
    
    ASSERT_EQ( n1 & n3, 0 );
    ASSERT_EQ( n2 & n3, 0 );
    ASSERT_EQ( n3 & n3, 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CFTypeRef >( CF::Number( 12 ).GetCFObject() ), 0 );
    ASSERT_EQ( n2 & static_cast< CFTypeRef >( CF::Number( 12 ).GetCFObject() ), 8 );
    ASSERT_EQ( n3 & static_cast< CFTypeRef >( CF::Number( 12 ).GetCFObject() ), 0 );
    
    ASSERT_EQ( n1 & static_cast< CFTypeRef >( n3.GetCFObject() ), 0 );
    ASSERT_EQ( n2 & static_cast< CFTypeRef >( n3.GetCFObject() ), 0 );
    ASSERT_EQ( n3 & static_cast< CFTypeRef >( n3.GetCFObject() ), 0 );
    
    ASSERT_EQ( n1 & static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 0 );
    ASSERT_EQ( n2 & static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 0 );
    ASSERT_EQ( n3 & static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CFNumberRef >( CF::Number( 12 ).GetCFObject() ), 0 );
    ASSERT_EQ( n2 & static_cast< CFNumberRef >( CF::Number( 12 ).GetCFObject() ), 8 );
    ASSERT_EQ( n3 & static_cast< CFNumberRef >( CF::Number( 12 ).GetCFObject() ), 0 );
    
    ASSERT_EQ( n1 & static_cast< CFNumberRef >( n3.GetCFObject() ), 0 );
    ASSERT_EQ( n2 & static_cast< CFNumberRef >( n3.GetCFObject() ), 0 );
    ASSERT_EQ( n3 & static_cast< CFNumberRef >( n3.GetCFObject() ), 0 );
    
    ASSERT_EQ( n1 & static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 0 );
    ASSERT_EQ( n2 & static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 0 );
    ASSERT_EQ( n3 & static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndSInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CF::Number::SInt8 >( 12 ), 0 );
    ASSERT_EQ( n2 & static_cast< CF::Number::SInt8 >( 12 ), 8 );
    ASSERT_EQ( n3 & static_cast< CF::Number::SInt8 >( 12 ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndSInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CF::Number::SInt16 >( 12 ), 0 );
    ASSERT_EQ( n2 & static_cast< CF::Number::SInt16 >( 12 ), 8 );
    ASSERT_EQ( n3 & static_cast< CF::Number::SInt16 >( 12 ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndSInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CF::Number::SInt32 >( 12 ), 0 );
    ASSERT_EQ( n2 & static_cast< CF::Number::SInt32 >( 12 ), 8 );
    ASSERT_EQ( n3 & static_cast< CF::Number::SInt32 >( 12 ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndSInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CF::Number::SInt64 >( 12 ), 0 );
    ASSERT_EQ( n2 & static_cast< CF::Number::SInt64 >( 12 ), 8 );
    ASSERT_EQ( n3 & static_cast< CF::Number::SInt64 >( 12 ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndUInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CF::Number::UInt8 >( 12 ), 0 );
    ASSERT_EQ( n2 & static_cast< CF::Number::UInt8 >( 12 ), 8 );
    ASSERT_EQ( n3 & static_cast< CF::Number::UInt8 >( 12 ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndUInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CF::Number::UInt16 >( 12 ), 0 );
    ASSERT_EQ( n2 & static_cast< CF::Number::UInt16 >( 12 ), 8 );
    ASSERT_EQ( n3 & static_cast< CF::Number::UInt16 >( 12 ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndUInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CF::Number::UInt32 >( 12 ), 0 );
    ASSERT_EQ( n2 & static_cast< CF::Number::UInt32 >( 12 ), 8 );
    ASSERT_EQ( n3 & static_cast< CF::Number::UInt32 >( 12 ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndUInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CF::Number::UInt64 >( 12 ), 0 );
    ASSERT_EQ( n2 & static_cast< CF::Number::UInt64 >( 12 ), 8 );
    ASSERT_EQ( n3 & static_cast< CF::Number::UInt64 >( 12 ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseOrNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | CF::Number( 21 ), 21 );
    ASSERT_EQ( n2 | CF::Number( 21 ), 63 );
    ASSERT_EQ( n3 | CF::Number( 21 ), 21 );
    
    ASSERT_EQ( n1 | n3,  0 );
    ASSERT_EQ( n2 | n3, 42 );
    ASSERT_EQ( n3 | n3,  0 );
}

TEST( CFPP_Number, OperatorBitwiseOrCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CFTypeRef >( CF::Number( 21 ).GetCFObject() ), 21 );
    ASSERT_EQ( n2 | static_cast< CFTypeRef >( CF::Number( 21 ).GetCFObject() ), 63 );
    ASSERT_EQ( n3 | static_cast< CFTypeRef >( CF::Number( 21 ).GetCFObject() ), 21 );
    
    ASSERT_EQ( n1 | static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 | static_cast< CFTypeRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 | static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 | static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 | static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 | static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorBitwiseOrCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CFNumberRef >( CF::Number( 21 ).GetCFObject() ), 21 );
    ASSERT_EQ( n2 | static_cast< CFNumberRef >( CF::Number( 21 ).GetCFObject() ), 63 );
    ASSERT_EQ( n3 | static_cast< CFNumberRef >( CF::Number( 21 ).GetCFObject() ), 21 );
    
    ASSERT_EQ( n1 | static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 | static_cast< CFNumberRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 | static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 | static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 | static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 | static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorBitwiseOrSInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CF::Number::SInt8 >( 21 ), 21 );
    ASSERT_EQ( n2 | static_cast< CF::Number::SInt8 >( 21 ), 63 );
    ASSERT_EQ( n3 | static_cast< CF::Number::SInt8 >( 21 ), 21 );
}

TEST( CFPP_Number, OperatorBitwiseOrSInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CF::Number::SInt16 >( 21 ), 21 );
    ASSERT_EQ( n2 | static_cast< CF::Number::SInt16 >( 21 ), 63 );
    ASSERT_EQ( n3 | static_cast< CF::Number::SInt16 >( 21 ), 21 );
}

TEST( CFPP_Number, OperatorBitwiseOrSInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CF::Number::SInt32 >( 21 ), 21 );
    ASSERT_EQ( n2 | static_cast< CF::Number::SInt32 >( 21 ), 63 );
    ASSERT_EQ( n3 | static_cast< CF::Number::SInt32 >( 21 ), 21 );
}

TEST( CFPP_Number, OperatorBitwiseOrSInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CF::Number::SInt64 >( 21 ), 21 );
    ASSERT_EQ( n2 | static_cast< CF::Number::SInt64 >( 21 ), 63 );
    ASSERT_EQ( n3 | static_cast< CF::Number::SInt64 >( 21 ), 21 );
}

TEST( CFPP_Number, OperatorBitwiseOrUInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CF::Number::UInt8 >( 21 ), 21 );
    ASSERT_EQ( n2 | static_cast< CF::Number::UInt8 >( 21 ), 63 );
    ASSERT_EQ( n3 | static_cast< CF::Number::UInt8 >( 21 ), 21 );
}

TEST( CFPP_Number, OperatorBitwiseOrUInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CF::Number::UInt16 >( 21 ), 21 );
    ASSERT_EQ( n2 | static_cast< CF::Number::UInt16 >( 21 ), 63 );
    ASSERT_EQ( n3 | static_cast< CF::Number::UInt16 >( 21 ), 21 );
}

TEST( CFPP_Number, OperatorBitwiseOrUInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CF::Number::UInt32 >( 21 ), 21 );
    ASSERT_EQ( n2 | static_cast< CF::Number::UInt32 >( 21 ), 63 );
    ASSERT_EQ( n3 | static_cast< CF::Number::UInt32 >( 21 ), 21 );
}

TEST( CFPP_Number, OperatorBitwiseOrUInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CF::Number::UInt64 >( 21 ), 21 );
    ASSERT_EQ( n2 | static_cast< CF::Number::UInt64 >( 21 ), 63 );
    ASSERT_EQ( n3 | static_cast< CF::Number::UInt64 >( 21 ), 21 );
}

TEST( CFPP_Number, OperatorXorNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ CF::Number( 43 ), 43 );
    ASSERT_EQ( n2 ^ CF::Number( 43 ),  1 );
    ASSERT_EQ( n3 ^ CF::Number( 43 ), 43 );
    
    ASSERT_EQ( n1 ^ n3,  0 );
    ASSERT_EQ( n2 ^ n3, 42 );
    ASSERT_EQ( n3 ^ n3,  0 );
}

TEST( CFPP_Number, OperatorXorCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CFTypeRef >( CF::Number( 43 ).GetCFObject() ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CFTypeRef >( CF::Number( 43 ).GetCFObject() ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CFTypeRef >( CF::Number( 43 ).GetCFObject() ), 43 );
    
    ASSERT_EQ( n1 ^ static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 ^ static_cast< CFTypeRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 ^ static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 ^ static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 ^ static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 ^ static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorXorCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CFNumberRef >( CF::Number( 43 ).GetCFObject() ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CFNumberRef >( CF::Number( 43 ).GetCFObject() ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CFNumberRef >( CF::Number( 43 ).GetCFObject() ), 43 );
    
    ASSERT_EQ( n1 ^ static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 ^ static_cast< CFNumberRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 ^ static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 ^ static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 ^ static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 ^ static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorXorSInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CF::Number::SInt8 >( 43 ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CF::Number::SInt8 >( 43 ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CF::Number::SInt8 >( 43 ), 43 );
}

TEST( CFPP_Number, OperatorXorSInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CF::Number::SInt16 >( 43 ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CF::Number::SInt16 >( 43 ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CF::Number::SInt16 >( 43 ), 43 );
}

TEST( CFPP_Number, OperatorXorSInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CF::Number::SInt32 >( 43 ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CF::Number::SInt32 >( 43 ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CF::Number::SInt32 >( 43 ), 43 );
}

TEST( CFPP_Number, OperatorXorSInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CF::Number::SInt64 >( 43 ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CF::Number::SInt64 >( 43 ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CF::Number::SInt64 >( 43 ), 43 );
}

TEST( CFPP_Number, OperatorXorUInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CF::Number::UInt8 >( 43 ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CF::Number::UInt8 >( 43 ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CF::Number::UInt8 >( 43 ), 43 );
}

TEST( CFPP_Number, OperatorXorUInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CF::Number::UInt16 >( 43 ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CF::Number::UInt16 >( 43 ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CF::Number::UInt16 >( 43 ), 43 );
}

TEST( CFPP_Number, OperatorXorUInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CF::Number::UInt32 >( 43 ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CF::Number::UInt32 >( 43 ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CF::Number::UInt32 >( 43 ), 43 );
}

TEST( CFPP_Number, OperatorXorUInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CF::Number::UInt64 >( 43 ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CF::Number::UInt64 >( 43 ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CF::Number::UInt64 >( 43 ), 43 );
}

TEST( CFPP_Number, OperatorLeftShiftNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << CF::Number( 1 ),  0 );
    ASSERT_EQ( n2 << CF::Number( 1 ), 84 );
    ASSERT_EQ( n3 << CF::Number( 1 ),  0 );
    
    ASSERT_EQ( n1 << n3,  0 );
    ASSERT_EQ( n2 << n3, 42 );
    ASSERT_EQ( n3 << n3,  0 );
}

TEST( CFPP_Number, OperatorLeftShiftCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ),  0 );
    ASSERT_EQ( n2 << static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ), 84 );
    ASSERT_EQ( n3 << static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 << static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 << static_cast< CFTypeRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 << static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 << static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 << static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 << static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ),  0 );
    ASSERT_EQ( n2 << static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ), 84 );
    ASSERT_EQ( n3 << static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 << static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 << static_cast< CFNumberRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 << static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 << static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 << static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 << static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftSInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CF::Number::SInt8 >( 1 ),  0 );
    ASSERT_EQ( n2 << static_cast< CF::Number::SInt8 >( 1 ), 84 );
    ASSERT_EQ( n3 << static_cast< CF::Number::SInt8 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftSInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CF::Number::SInt16 >( 1 ),  0 );
    ASSERT_EQ( n2 << static_cast< CF::Number::SInt16 >( 1 ), 84 );
    ASSERT_EQ( n3 << static_cast< CF::Number::SInt16 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftSInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CF::Number::SInt32 >( 1 ),  0 );
    ASSERT_EQ( n2 << static_cast< CF::Number::SInt32 >( 1 ), 84 );
    ASSERT_EQ( n3 << static_cast< CF::Number::SInt32 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftSInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CF::Number::SInt64 >( 1 ),  0 );
    ASSERT_EQ( n2 << static_cast< CF::Number::SInt64 >( 1 ), 84 );
    ASSERT_EQ( n3 << static_cast< CF::Number::SInt64 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftUInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CF::Number::UInt8 >( 1 ),  0 );
    ASSERT_EQ( n2 << static_cast< CF::Number::UInt8 >( 1 ), 84 );
    ASSERT_EQ( n3 << static_cast< CF::Number::UInt8 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftUInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CF::Number::UInt16 >( 1 ),  0 );
    ASSERT_EQ( n2 << static_cast< CF::Number::UInt16 >( 1 ), 84 );
    ASSERT_EQ( n3 << static_cast< CF::Number::UInt16 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftUInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CF::Number::UInt32 >( 1 ),  0 );
    ASSERT_EQ( n2 << static_cast< CF::Number::UInt32 >( 1 ), 84 );
    ASSERT_EQ( n3 << static_cast< CF::Number::UInt32 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftUInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CF::Number::UInt64 >( 1 ),  0 );
    ASSERT_EQ( n2 << static_cast< CF::Number::UInt64 >( 1 ), 84 );
    ASSERT_EQ( n3 << static_cast< CF::Number::UInt64 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> CF::Number( 1 ),  0 );
    ASSERT_EQ( n2 >> CF::Number( 1 ), 21 );
    ASSERT_EQ( n3 >> CF::Number( 1 ),  0 );
    
    ASSERT_EQ( n1 >> n3,  0 );
    ASSERT_EQ( n2 >> n3, 42 );
    ASSERT_EQ( n3 >> n3,  0 );
}

TEST( CFPP_Number, OperatorRightShiftCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ),  0 );
    ASSERT_EQ( n2 >> static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ), 21 );
    ASSERT_EQ( n3 >> static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 >> static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 >> static_cast< CFTypeRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 >> static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 >> static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 >> static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 >> static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ),  0 );
    ASSERT_EQ( n2 >> static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ), 21 );
    ASSERT_EQ( n3 >> static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 >> static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 >> static_cast< CFNumberRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 >> static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 >> static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 >> static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 >> static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftSInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CF::Number::SInt8 >( 1 ),  0 );
    ASSERT_EQ( n2 >> static_cast< CF::Number::SInt8 >( 1 ), 21 );
    ASSERT_EQ( n3 >> static_cast< CF::Number::SInt8 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftSInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CF::Number::SInt16 >( 1 ),  0 );
    ASSERT_EQ( n2 >> static_cast< CF::Number::SInt16 >( 1 ), 21 );
    ASSERT_EQ( n3 >> static_cast< CF::Number::SInt16 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftSInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CF::Number::SInt32 >( 1 ),  0 );
    ASSERT_EQ( n2 >> static_cast< CF::Number::SInt32 >( 1 ), 21 );
    ASSERT_EQ( n3 >> static_cast< CF::Number::SInt32 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftSInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CF::Number::SInt64 >( 1 ),  0 );
    ASSERT_EQ( n2 >> static_cast< CF::Number::SInt64 >( 1 ), 21 );
    ASSERT_EQ( n3 >> static_cast< CF::Number::SInt64 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftUInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CF::Number::UInt8 >( 1 ),  0 );
    ASSERT_EQ( n2 >> static_cast< CF::Number::UInt8 >( 1 ), 21 );
    ASSERT_EQ( n3 >> static_cast< CF::Number::UInt8 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftUInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CF::Number::UInt16 >( 1 ),  0 );
    ASSERT_EQ( n2 >> static_cast< CF::Number::UInt16 >( 1 ), 21 );
    ASSERT_EQ( n3 >> static_cast< CF::Number::UInt16 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftUInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CF::Number::UInt32 >( 1 ),  0 );
    ASSERT_EQ( n2 >> static_cast< CF::Number::UInt32 >( 1 ), 21 );
    ASSERT_EQ( n3 >> static_cast< CF::Number::UInt32 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftUInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CF::Number::UInt64 >( 1 ),  0 );
    ASSERT_EQ( n2 >> static_cast< CF::Number::UInt64 >( 1 ), 21 );
    ASSERT_EQ( n3 >> static_cast< CF::Number::UInt64 >( 1 ),  0 );
}

TEST( CFPP_Number, CastToSInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( static_cast< CF::Number::SInt8 >( n1 ), static_cast< CF::Number::SInt8 >(  0 ) );
    ASSERT_EQ( static_cast< CF::Number::SInt8 >( n2 ), static_cast< CF::Number::SInt8 >( 42 ) );
    ASSERT_EQ( static_cast< CF::Number::SInt8 >( n3 ), static_cast< CF::Number::SInt8 >(  0 ) );
}

TEST( CFPP_Number, CastToSInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( static_cast< CF::Number::SInt16 >( n1 ), static_cast< CF::Number::SInt16 >(  0 ) );
    ASSERT_EQ( static_cast< CF::Number::SInt16 >( n2 ), static_cast< CF::Number::SInt16 >( 42 ) );
    ASSERT_EQ( static_cast< CF::Number::SInt16 >( n3 ), static_cast< CF::Number::SInt16 >(  0 ) );
}

TEST( CFPP_Number, CastToSInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( static_cast< CF::Number::SInt32 >( n1 ), static_cast< CF::Number::SInt32 >(  0 ) );
    ASSERT_EQ( static_cast< CF::Number::SInt32 >( n2 ), static_cast< CF::Number::SInt32 >( 42 ) );
    ASSERT_EQ( static_cast< CF::Number::SInt32 >( n3 ), static_cast< CF::Number::SInt32 >(  0 ) );
}

TEST( CFPP_Number, CastToSInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( static_cast< CF::Number::SInt64 >( n1 ), static_cast< CF::Number::SInt64 >(  0 ) );
    ASSERT_EQ( static_cast< CF::Number::SInt64 >( n2 ), static_cast< CF::Number::SInt64 >( 42 ) );
    ASSERT_EQ( static_cast< CF::Number::SInt64 >( n3 ), static_cast< CF::Number::SInt64 >(  0 ) );
}

TEST( CFPP_Number, CastToUInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( static_cast< CF::Number::UInt8 >( n1 ), static_cast< CF::Number::UInt8 >(  0 ) );
    ASSERT_EQ( static_cast< CF::Number::UInt8 >( n2 ), static_cast< CF::Number::UInt8 >( 42 ) );
    ASSERT_EQ( static_cast< CF::Number::UInt8 >( n3 ), static_cast< CF::Number::UInt8 >(  0 ) );
}

TEST( CFPP_Number, CastToUInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( static_cast< CF::Number::UInt16 >( n1 ), static_cast< CF::Number::UInt16 >(  0 ) );
    ASSERT_EQ( static_cast< CF::Number::UInt16 >( n2 ), static_cast< CF::Number::UInt16 >( 42 ) );
    ASSERT_EQ( static_cast< CF::Number::UInt16 >( n3 ), static_cast< CF::Number::UInt16 >(  0 ) );
}

TEST( CFPP_Number, CastToUInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( static_cast< CF::Number::UInt32 >( n1 ), static_cast< CF::Number::UInt32 >(  0 ) );
    ASSERT_EQ( static_cast< CF::Number::UInt32 >( n2 ), static_cast< CF::Number::UInt32 >( 42 ) );
    ASSERT_EQ( static_cast< CF::Number::UInt32 >( n3 ), static_cast< CF::Number::UInt32 >(  0 ) );
}

TEST( CFPP_Number, CastToUInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( static_cast< CF::Number::UInt64 >( n1 ), static_cast< CF::Number::UInt64 >(  0 ) );
    ASSERT_EQ( static_cast< CF::Number::UInt64 >( n2 ), static_cast< CF::Number::UInt64 >( 42 ) );
    ASSERT_EQ( static_cast< CF::Number::UInt64 >( n3 ), static_cast< CF::Number::UInt64 >(  0 ) );
}

TEST( CFPP_Number, CastToFloat32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( static_cast< CF::Number::Float32 >( n1 ),  0 ) );
    ASSERT_TRUE( FloatIsEqual( static_cast< CF::Number::Float32 >( n2 ), 42 ) );
    ASSERT_TRUE( FloatIsEqual( static_cast< CF::Number::Float32 >( n3 ),  0 ) );
}

TEST( CFPP_Number, CastToFloat64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( static_cast< CF::Number::Float64 >( n1 ),  0 ) );
    ASSERT_TRUE( FloatIsEqual( static_cast< CF::Number::Float64 >( n2 ), 42 ) );
    ASSERT_TRUE( FloatIsEqual( static_cast< CF::Number::Float64 >( n3 ),  0 ) );
}

TEST( CFPP_Number, GetTypeID )
{
    CF::Number n;
    
    ASSERT_EQ( n.GetTypeID(), CFNumberGetTypeID() );
}

TEST( CFPP_Number, GetCFObject )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( n1.GetCFObject() != NULL );
    ASSERT_TRUE( n2.GetCFObject() != NULL );
    ASSERT_TRUE( n3.GetCFObject() == NULL );
    ASSERT_EQ( CFGetTypeID( n1.GetCFObject() ), CFNumberGetTypeID() );
    ASSERT_EQ( CFGetTypeID( n2.GetCFObject() ), CFNumberGetTypeID() );
}

TEST( CFPP_Number, IsFloatType )
{
    CF::Number n1;
    CF::Number n2( static_cast< CF::Number::UInt8 >( 42 ) );
    CF::Number n3( static_cast< CF::Number::Float32 >( 42 ) );
    CF::Number n4( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_FALSE( n1.IsFloatType() );
    ASSERT_FALSE( n2.IsFloatType() );
    ASSERT_TRUE(  n3.IsFloatType() );
    ASSERT_FALSE( n4.IsFloatType() );
}

TEST( CFPP_Number, GetSInt8Value )
{
    CF::Number n( 42 );
    
    ASSERT_EQ( n.GetSInt8Value(), static_cast< CF::Number::SInt8 >( 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_EQ( n.GetSInt8Value(), static_cast< CF::Number::SInt8 >( 0 ) );
}

TEST( CFPP_Number, GetSInt16Value )
{
    CF::Number n( 42 );
    
    ASSERT_EQ( n.GetSInt16Value(), static_cast< CF::Number::SInt16 >( 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_EQ( n.GetSInt16Value(), static_cast< CF::Number::SInt16 >( 0 ) );
}

TEST( CFPP_Number, GetSInt32Value )
{
    CF::Number n( 42 );
    
    ASSERT_EQ( n.GetSInt32Value(), static_cast< CF::Number::SInt32 >( 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_EQ( n.GetSInt32Value(), static_cast< CF::Number::SInt32 >( 0 ) );
}

TEST( CFPP_Number, GetSInt64Value )
{
    CF::Number n( 42 );
    
    ASSERT_EQ( n.GetSInt64Value(), static_cast< CF::Number::SInt64 >( 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_EQ( n.GetSInt64Value(), static_cast< CF::Number::SInt64 >( 0 ) );
}

TEST( CFPP_Number, GetUInt8Value )
{
    CF::Number n( 42 );
    
    ASSERT_EQ( n.GetUInt8Value(), static_cast< CF::Number::UInt8 >( 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_EQ( n.GetUInt8Value(), static_cast< CF::Number::UInt8 >( 0 ) );
}

TEST( CFPP_Number, GetUInt16Value )
{
    CF::Number n( 42 );
    
    ASSERT_EQ( n.GetUInt16Value(), static_cast< CF::Number::UInt16 >( 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_EQ( n.GetUInt16Value(), static_cast< CF::Number::UInt16 >( 0 ) );
}

TEST( CFPP_Number, GetUInt32Value )
{
    CF::Number n( 42 );
    
    ASSERT_EQ( n.GetUInt32Value(), static_cast< CF::Number::UInt32 >( 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_EQ( n.GetUInt32Value(), static_cast< CF::Number::UInt32 >( 0 ) );
}

TEST( CFPP_Number, GetUInt64Value )
{
    CF::Number n( 42 );
    
    ASSERT_EQ( n.GetUInt64Value(), static_cast< CF::Number::UInt64 >( 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_EQ( n.GetUInt64Value(), static_cast< CF::Number::UInt64 >( 0 ) );
}

TEST( CFPP_Number, GetFloat32Value )
{
    CF::Number n( 42 );
    
    ASSERT_TRUE( FloatIsEqual( n.GetFloat32Value(), 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_TRUE( FloatIsEqual( n.GetFloat32Value(), 0 ) );
}

TEST( CFPP_Number, GetFloat64Value )
{
    CF::Number n( 42 );
    
    ASSERT_TRUE( FloatIsEqual( n.GetFloat64Value(), 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_TRUE( FloatIsEqual( n.GetFloat64Value(), 0 ) );
}

TEST( CFPP_Number, SetSInt8Value )
{
    CF::Number n;
    
    n.SetSInt8Value( 42 );
    
    ASSERT_EQ( n.GetSInt8Value(), static_cast< CF::Number::SInt8 >( 42 ) );
}

TEST( CFPP_Number, SetSInt16Value )
{
    CF::Number n;
    
    n.SetSInt16Value( 42 );
    
    ASSERT_EQ( n.GetSInt16Value(), static_cast< CF::Number::SInt16 >( 42 ) );
}

TEST( CFPP_Number, SetSInt32Value )
{
    CF::Number n;
    
    n.SetSInt32Value( 42 );
    
    ASSERT_EQ( n.GetSInt32Value(), static_cast< CF::Number::SInt32 >( 42 ) );
}

TEST( CFPP_Number, SetSInt64Value )
{
    CF::Number n;
    
    n.SetSInt64Value( 42 );
    
    ASSERT_EQ( n.GetSInt64Value(), static_cast< CF::Number::SInt64 >( 42 ) );
}

TEST( CFPP_Number, SetUInt8Value )
{
    CF::Number n;
    
    n.SetUInt8Value( 42 );
    
    ASSERT_EQ( n.GetUInt8Value(), static_cast< CF::Number::UInt8 >( 42 ) );
}

TEST( CFPP_Number, SetUInt16Value )
{
    CF::Number n;
    
    n.SetUInt16Value( 42 );
    
    ASSERT_EQ( n.GetUInt16Value(), static_cast< CF::Number::UInt16 >( 42 ) );
}

TEST( CFPP_Number, SetUInt32Value )
{
    CF::Number n;
    
    n.SetUInt32Value( 42 );
    
    ASSERT_EQ( n.GetUInt32Value(), static_cast< CF::Number::UInt32 >( 42 ) );
}

TEST( CFPP_Number, SetUInt64Value )
{
    CF::Number n;
    
    n.SetUInt64Value( 42 );
    
    ASSERT_EQ( n.GetUInt64Value(), static_cast< CF::Number::UInt64 >( 42 ) );
}

TEST( CFPP_Number, SetFloat32Value )
{
    CF::Number n;
    
    n.SetFloat32Value( 42 );
    
    ASSERT_TRUE( FloatIsEqual( n.GetFloat32Value(), 42 ) );
}

TEST( CFPP_Number, SetFloat64Value )
{
    CF::Number n;
    
    n.SetFloat64Value( 42 );
    
    ASSERT_TRUE( FloatIsEqual( n.GetFloat64Value(), 42 ) );
}

TEST( CFPP_Number, Swap )
{
    CF::Number n1( 1 );
    CF::Number n2( 2 );
    
    swap( n1, n2 );
    
    ASSERT_EQ( n1, 2 );
    ASSERT_EQ( n2, 1 );
}

// Hidden from analyzer because it misreports a leak
#ifndef __clang_analyzer__
TEST( CFPP_Number, BridgingRelease )
{
	// Wrapper retains, so retain count should be the same after bridge

	int x = 42;
	CFNumberRef cf = CFNumberCreate(NULL, kCFNumberIntType, &x);

	CFRetain(cf);

	CFIndex retainCount = CFGetRetainCount(cf);

	ASSERT_EQ(CFGetRetainCount(cf), retainCount);

	CF::Number cpp = CF::BridgingRelease(cf);

	ASSERT_EQ(CFGetRetainCount(cf), retainCount);

	CFRelease(cf);
}
#endif
