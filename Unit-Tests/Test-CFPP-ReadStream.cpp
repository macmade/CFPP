/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @file        Test-CFPP-ReadStream.cpp
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    Unit tests for CF::ReadStream
 */

#include <CF++.hpp>
#include <GoogleMock/GoogleMock.h>

using namespace testing;

TEST( CFPP_ReadStream, CTOR )
{
    CF::ReadStream s;
    
    ASSERT_FALSE( s.IsValid() );
}

TEST( CFPP_ReadStream, CTOR_STDString )
{
    CF::ReadStream s1( std::string( "/etc/hosts" ) );
    CF::ReadStream s2( std::string( "/foo/bar" ) );
    
    ASSERT_TRUE( s1.IsValid() );
    ASSERT_TRUE( s2.IsValid() );
}

TEST( CFPP_ReadStream, CTOR_CChar )
{
    CF::ReadStream s1( "/etc/hosts" );
    CF::ReadStream s2( "/foo/bar" );
    
    ASSERT_TRUE( s1.IsValid() );
    ASSERT_TRUE( s2.IsValid() );
}

TEST( CFPP_ReadStream, CTOR_URL )
{
    CF::ReadStream s1( CF::URL( "file:///etc/hosts" ) );
    CF::ReadStream s2( CF::URL( "file:///foo/bar" ) );
    
    ASSERT_TRUE( s1.IsValid() );
    ASSERT_TRUE( s2.IsValid() );
}

TEST( CFPP_ReadStream, CTOR_CFType )
{
    CF::ReadStream s1( CF::URL( "file:///etc/hosts" ) );
    CF::ReadStream s2( static_cast< CFTypeRef >( s1.GetCFObject() ) );
    CF::ReadStream s3( static_cast< CFTypeRef >( NULL ) );
    
    ASSERT_TRUE(  s1.IsValid() );
    ASSERT_TRUE(  s2.IsValid() );
    ASSERT_FALSE( s3.IsValid() );
}

TEST( CFPP_ReadStream, CTOR_CFReadStream )
{
    CF::ReadStream s1( CF::URL( "file:///etc/hosts" ) );
    CF::ReadStream s2( static_cast< CFReadStreamRef >( const_cast< void * >( s1.GetCFObject() ) ) );
    CF::ReadStream s3( static_cast< CFReadStreamRef >( NULL ) );
    
    ASSERT_TRUE(  s1.IsValid() );
    ASSERT_TRUE(  s2.IsValid() );
    ASSERT_FALSE( s3.IsValid() );
}

TEST( CFPP_ReadStream, CCTOR )
{
    CF::ReadStream s1( CF::URL( "file:///etc/hosts" ) );
    CF::ReadStream s2( s1 );
    
    ASSERT_TRUE( s1.IsValid() );
    ASSERT_TRUE( s2.IsValid() );
}

#ifdef CFPP_HAS_CPP11
TEST( CFPP_ReadStream, MCTOR )
{
    CF::ReadStream s1( CF::URL( "file:///etc/hosts" ) );
    CF::ReadStream s2( std::move( s1 ) );
    
    ASSERT_FALSE( s1.IsValid() );
    ASSERT_TRUE(  s2.IsValid() );
}
#endif

TEST( CFPP_ReadStream, OperatorAssignReadStream )
{
    CF::ReadStream s1( CF::URL( "file:///etc/hosts" ) );
    CF::ReadStream s2;
    CF::ReadStream s3;
    
    ASSERT_TRUE(  s1.IsValid() );
    ASSERT_FALSE( s2.IsValid() );
    ASSERT_FALSE( s3.IsValid() );
    
    s2 = s1;
    
    ASSERT_TRUE( s2.IsValid() );
    
    s2 = s3;
    
    ASSERT_FALSE( s2.IsValid() );
}

TEST( CFPP_ReadStream, OperatorAssignCFType )
{
    CF::ReadStream s1( CF::URL( "file:///etc/hosts" ) );
    CF::ReadStream s2;
    
    ASSERT_TRUE(  s1.IsValid() );
    ASSERT_FALSE( s2.IsValid() );
    
    s2 = static_cast< CFTypeRef >( s1.GetCFObject() );
    
    ASSERT_TRUE( s2.IsValid() );
    
    s2 = static_cast< CFTypeRef >( NULL );
    
    ASSERT_FALSE( s2.IsValid() );
}

TEST( CFPP_ReadStream, OperatorAssignCFReadStream )
{
    CF::ReadStream s1( CF::URL( "file:///etc/hosts" ) );
    CF::ReadStream s2;
    
    ASSERT_TRUE(  s1.IsValid() );
    ASSERT_FALSE( s2.IsValid() );
    
    s2 = static_cast< CFReadStreamRef >( const_cast< void * >( s1.GetCFObject() ) );
    
    ASSERT_TRUE( s2.IsValid() );
    
    s2 = static_cast< CFReadStreamRef >( NULL );
    
    ASSERT_FALSE( s2.IsValid() );
}

TEST( CFPP_ReadStream, GetTypeID )
{
    CF::ReadStream s;
    
    ASSERT_EQ( s.GetTypeID(), CFReadStreamGetTypeID() );
}

TEST( CFPP_ReadStream, GetCFObject )
{
    CF::ReadStream s1;
    CF::ReadStream s2( CF::URL( "file:///etc/hosts" ) );
    CF::ReadStream s3( static_cast< CFReadStreamRef >( NULL ) );
    
    ASSERT_TRUE( s1.GetCFObject() == NULL );
    ASSERT_TRUE( s2.GetCFObject() != NULL );
    ASSERT_TRUE( s3.GetCFObject() == NULL );
    ASSERT_EQ( CFGetTypeID( s2.GetCFObject() ), CFReadStreamGetTypeID() );
}

TEST( CFPP_ReadStream, Open )
{}

TEST( CFPP_ReadStream, Open_STDString )
{}

TEST( CFPP_ReadStream, Open_CChar )
{}

TEST( CFPP_ReadStream, Open_URL )
{}

TEST( CFPP_ReadStream, Close )
{}

TEST( CFPP_ReadStream, HasBytesAvailable )
{}

TEST( CFPP_ReadStream, GetStatus )
{}

TEST( CFPP_ReadStream, GetError )
{}

TEST( CFPP_ReadStream, Read_BytePtr_CFIndex )
{}

TEST( CFPP_ReadStream, Read_CFIndex )
{}

TEST( CFPP_ReadStream, GetBuffer )
{}

TEST( CFPP_ReadStream, GetProperty )
{}

TEST( CFPP_ReadStream, SetProperty )
{}

TEST( CFPP_ReadStream, SetClient )
{}

TEST( CFPP_ReadStream, Swap )
{}

// Hidden from analyzer because it misreports a leak
#ifndef __clang_analyzer__
TEST( CFPP_ReadStream, BridgingRelease )
{
	// Wrapper retains, so retain count should be the same after bridge

	CFReadStreamRef cf = CFReadStreamCreateWithBytesNoCopy(NULL, NULL, 0, kCFAllocatorNull);

	CFRetain(cf);

	CFIndex retainCount = CFGetRetainCount(cf);

	ASSERT_EQ(CFGetRetainCount(cf), retainCount);

	CF::ReadStream cpp = CF::BridgingRelease(cf);

	ASSERT_EQ(CFGetRetainCount(cf), retainCount);

	CFRelease(cf);
}
#endif
